"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iOSCredentialsManager = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const uuid_1 = require("uuid");
const distributionCertificateUtils = __importStar(require("./utils/distributionCertificate"));
const keychain_1 = __importDefault(require("./utils/keychain"));
const provisioningProfile_1 = __importDefault(require("./utils/provisioningProfile"));
class iOSCredentialsManager {
    constructor(logger, job) {
        this.cleanedUp = false;
        this.logger = logger;
        this.job = job;
        this.distributionCertificatePath = path_1.default.join(os_1.default.tmpdir(), `${uuid_1.v4()}.p12`);
    }
    async prepare() {
        const { secrets } = this.job;
        if (!secrets) {
            throw new Error('credentials are required for an iOS build');
        }
        this.logger.info('Getting distribution certificate fingerprint');
        const certificateFingerprint = distributionCertificateUtils.getFingerprint(secrets.distributionCertificate);
        this.logger.info(`Writing distribution certificate to ${this.distributionCertificatePath}`);
        await fs_extra_1.default.writeFile(this.distributionCertificatePath, Buffer.from(secrets.distributionCertificate.dataBase64, 'base64'));
        try {
            this.logger.info('Creating keychain');
            this.keychain = new keychain_1.default(this.logger);
            await this.keychain.create();
            this.logger.info('Importing distribution certificate into the keychain');
            await this.keychain.importCertificate(this.distributionCertificatePath, secrets.distributionCertificate.password);
            this.logger.info('Initializing provisioning profile');
            this.provisioningProfile = new provisioningProfile_1.default(this.logger, Buffer.from(secrets.provisioningProfileBase64, 'base64'));
            await this.provisioningProfile.init();
            this.logger.info('Validating whether distribution certificate has been imported successfully');
            await this.keychain.ensureCertificateImported(this.provisioningProfile.data.teamId, certificateFingerprint);
            this.logger.info('Verifying whether the distribution certificate and provisioning profile match');
            this.provisioningProfile.verifyCertificate(certificateFingerprint);
            return {
                bundleIdentifier: this.provisioningProfile.data.bundleIdentifier,
                keychainPath: this.keychain.data.path,
                provisioningProfileUUID: this.provisioningProfile.data.uuid,
                teamId: this.provisioningProfile.data.teamId,
            };
        }
        catch (err) {
            await this.cleanUp();
            throw err;
        }
    }
    async cleanUp() {
        if (this.cleanedUp) {
            return;
        }
        if (this.keychain) {
            await this.keychain.destroy();
        }
        if (this.provisioningProfile) {
            await this.provisioningProfile.destroy();
        }
        this.cleanedUp = true;
    }
}
exports.iOSCredentialsManager = iOSCredentialsManager;
//# sourceMappingURL=credentials.js.map