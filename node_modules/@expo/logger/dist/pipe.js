"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipeSpawnOutput = exports.pipe = void 0;
function pipe(stream, loggerFn, lineTransformer) {
    const multilineLogger = createMultilineLogger(loggerFn, lineTransformer);
    stream.on('data', multilineLogger);
}
exports.pipe = pipe;
function pipeSpawnOutput(logger, { stdout, stderr } = {}, { printAsStdoutOnly = false, lineTransformer } = {}) {
    if (stdout) {
        const stdoutLogger = logger.child({ source: 'stdout' });
        pipe(stdout, (line) => stdoutLogger.info(line), lineTransformer);
    }
    if (stderr) {
        const stderrLogger = logger.child({ source: printAsStdoutOnly ? 'stdout' : 'stderr' });
        pipe(stderr, (line) => stderrLogger.info(line), lineTransformer);
    }
}
exports.pipeSpawnOutput = pipeSpawnOutput;
function createMultilineLogger(loggerFn, transformer) {
    return (data) => {
        if (!data) {
            return;
        }
        const lines = String(data).trim().split('\n');
        lines.forEach((line) => {
            if (transformer) {
                const transformedLine = transformer(line);
                if (transformedLine) {
                    loggerFn(transformedLine);
                }
            }
            else {
                loggerFn(line);
            }
        });
    };
}
//# sourceMappingURL=pipe.js.map