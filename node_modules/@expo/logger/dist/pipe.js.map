{"version":3,"file":"pipe.js","sourceRoot":"","sources":["../src/pipe.ts"],"names":[],"mappings":";;;AAgBA,SAAS,IAAI,CAAC,MAAgB,EAAE,QAAoB,EAAE,eAAiC;IACrF,MAAM,eAAe,GAAG,qBAAqB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;IACzE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;AACrC,CAAC;AAoCQ,oBAAI;AAlCb,SAAS,eAAe,CACtB,MAAc,EACd,EAAE,MAAM,EAAE,MAAM,KAAkB,EAAE,EACpC,EAAE,iBAAiB,GAAG,KAAK,EAAE,eAAe,KAAkB,EAAE;IAEhE,IAAI,MAAM,EAAE;QACV,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAC;KAClE;IACD,IAAI,MAAM,EAAE;QACV,MAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QACvF,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,eAAe,CAAC,CAAC;KAClE;AACH,CAAC;AAqBc,0CAAe;AAnB9B,SAAS,qBAAqB,CAAC,QAAoB,EAAE,WAA6B;IAChF,OAAO,CAAC,IAAS,EAAQ,EAAE;QACzB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QACD,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9C,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,IAAI,WAAW,EAAE;gBACf,MAAM,eAAe,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC1C,IAAI,eAAe,EAAE;oBACnB,QAAQ,CAAC,eAAe,CAAC,CAAC;iBAC3B;aACF;iBAAM;gBACL,QAAQ,CAAC,IAAI,CAAC,CAAC;aAChB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { Readable } from 'stream';\n\nimport bunyan from '@expo/bunyan';\n\ntype LineLogger = (line: string) => void;\ntype LineTransformer = (line: string) => string | null;\ninterface SpawnOutput {\n  stdout?: Readable | null;\n  stderr?: Readable | null;\n}\n\ninterface PipeOptions {\n  printAsStdoutOnly?: boolean;\n  lineTransformer?: LineTransformer;\n}\n\nfunction pipe(stream: Readable, loggerFn: LineLogger, lineTransformer?: LineTransformer): void {\n  const multilineLogger = createMultilineLogger(loggerFn, lineTransformer);\n  stream.on('data', multilineLogger);\n}\n\nfunction pipeSpawnOutput(\n  logger: bunyan,\n  { stdout, stderr }: SpawnOutput = {},\n  { printAsStdoutOnly = false, lineTransformer }: PipeOptions = {},\n): void {\n  if (stdout) {\n    const stdoutLogger = logger.child({ source: 'stdout' });\n    pipe(stdout, (line) => stdoutLogger.info(line), lineTransformer);\n  }\n  if (stderr) {\n    const stderrLogger = logger.child({ source: printAsStdoutOnly ? 'stdout' : 'stderr' });\n    pipe(stderr, (line) => stderrLogger.info(line), lineTransformer);\n  }\n}\n\nfunction createMultilineLogger(loggerFn: LineLogger, transformer?: LineTransformer) {\n  return (data: any): void => {\n    if (!data) {\n      return;\n    }\n    const lines = String(data).trim().split('\\n');\n    lines.forEach((line) => {\n      if (transformer) {\n        const transformedLine = transformer(line);\n        if (transformedLine) {\n          loggerFn(transformedLine);\n        }\n      } else {\n        loggerFn(line);\n      }\n    });\n  };\n}\n\nexport { pipe, pipeSpawnOutput };\n"]}