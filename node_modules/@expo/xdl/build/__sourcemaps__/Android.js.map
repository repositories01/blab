{"version":3,"sources":["Android.ts"],"names":["_lastUrl","_isAdbOwner","BEGINNING_OF_ADB_ERROR_MESSAGE","CANT_START_ACTIVITY_ERROR","INSTALL_WARNING_TIMEOUT","EMULATOR_MAX_WAIT_TIMEOUT","whichEmulator","process","env","ANDROID_HOME","whichADB","getEmulatorsAsync","stdout","split","filter","Boolean","maybeStartEmulatorAsync","name","Logger","global","info","emulatorProcess","child_process","spawn","stdio","detached","unref","Promise","resolve","reject","waitTimer","setInterval","_isDeviceAttachedAsync","stopWaiting","maxWait","setTimeout","manualCommand","stopWaitingAndReject","clearTimeout","clearInterval","message","Error","on","maybeStartAnyEmulatorAsync","emulators","length","isPlatformSupported","platform","adbAlreadyRunning","adb","result","lines","stderr","includes","e","errorMessage","startsWith","substring","getAdbOutputAsync","args","Binaries","addToPathAsync","alreadyRunning","trim","output","devices","reduce","previous","line","type","concat","_isDeviceAuthorizedAsync","shift","listOfDevicesWithoutFirstLine","join","_isExpoInstalledAsync","packages","i","_checkExpoUpToDateAsync","_apkCacheDirectory","dotExpoHomeDirectory","UserSettings","dir","path","fs","mkdirpSync","downloadApkAsync","url","downloadProgressCallback","versions","Versions","versionsAsync","apkPath","androidVersion","pathExists","Api","downloadAsync","androidUrl","undefined","installExpoAsync","bar","ProgressBar","total","width","warningTimer","setWarningTimer","notifications","code","NotificationCode","START_LOADING","progress","tick","STOP_LOADING","uninstallExpoAsync","isInstalled","error","upgradeExpoAsync","attemptToStartEmulatorOrAssertAsync","assertDeviceReadyAsync","genymotionMessage","_openUrlAsync","openClient","indexOf","openProject","openUrlAsync","isDetached","installedExpo","Analytics","logEvent","openProjectAsync","projectRoot","startAdbReverseAsync","projectUrl","UrlUtils","constructManifestUrlAsync","exp","skipSDKVersionRequirement","success","openWebProjectAsync","packagerInfo","ProjectSettings","readPackagerInfoAsync","expRc","userDefinedAdbReversePorts","extraAdbReversePorts","adbReversePorts","packagerPort","expoServerPort","port","adbReverse","stopAdbReverseAsync","adbReverseRemove","warn","debug","splashScreenDPIConstraints","dpi","sizeMultiplier","checkSplashScreenImages","projectDir","gteSdkVersion","splashScreenMode","android","splash","resizeMode","generalSplashImagePath","image","chalk","italic","generalSplashImage","androidSplash","androidSplashImages","imageRelativePath","splashImage","height","expectedWidth","expectedHeight","push","sizeMatches","bold","some","map","maybeStopAdbDaemonAsync"],"mappings":"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","sourcesContent":["import { getConfig, readExpRcAsync } from '@expo/config';\nimport spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport child_process from 'child_process';\nimport fs from 'fs-extra';\nimport trim from 'lodash/trim';\nimport path from 'path';\nimport ProgressBar from 'progress';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport * as Versions from './Versions';\nimport { getUrlAsync as getWebpackUrlAsync } from './Webpack';\nimport { getImageDimensionsAsync } from './tools/ImageUtils';\n\nlet _lastUrl: string | null = null;\nlet _isAdbOwner: boolean | null = null;\n\nconst BEGINNING_OF_ADB_ERROR_MESSAGE = 'error: ';\nconst CANT_START_ACTIVITY_ERROR = 'Activity not started, unable to resolve Intent';\n\nconst INSTALL_WARNING_TIMEOUT = 60 * 1000;\n\nconst EMULATOR_MAX_WAIT_TIMEOUT = 30 * 1000;\n\nfunction whichEmulator(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/emulator/emulator`;\n  }\n  return 'emulator';\n}\nfunction whichADB(): string {\n  if (process.env.ANDROID_HOME) {\n    return `${process.env.ANDROID_HOME}/platform-tools/adb`;\n  }\n  return 'adb';\n}\n\n/**\n * Returns a list of emulator names.\n */\nasync function getEmulatorsAsync(): Promise<string[]> {\n  try {\n    const { stdout } = await spawnAsync(whichEmulator(), ['-list-avds']);\n    return stdout.split('\\n').filter(Boolean);\n  } catch {\n    return [];\n  }\n}\n\nasync function maybeStartEmulatorAsync(name: string): Promise<void> {\n  Logger.global.info(`\\u203A Attempting to open emulator named: ${name}`);\n\n  // Start a process to open an emulator\n  const emulatorProcess = child_process.spawn(whichEmulator(), [`@${name}`], {\n    stdio: 'ignore',\n    detached: true,\n  });\n\n  emulatorProcess.unref();\n\n  return new Promise<void>((resolve, reject) => {\n    const waitTimer = setInterval(async () => {\n      if (await _isDeviceAttachedAsync()) {\n        stopWaiting();\n        resolve();\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const maxWait = setTimeout(() => {\n      const manualCommand = `${whichEmulator()} @${name}`;\n      stopWaitingAndReject(\n        `It took too long to start the Android emulator: ${name}. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    }, EMULATOR_MAX_WAIT_TIMEOUT);\n\n    const stopWaiting = () => {\n      clearTimeout(maxWait);\n      clearInterval(waitTimer);\n    };\n\n    const stopWaitingAndReject = (message: string) => {\n      stopWaiting();\n      reject(new Error(message));\n      clearInterval(waitTimer);\n    };\n\n    emulatorProcess.on('error', ({ message }) => stopWaitingAndReject(message));\n\n    emulatorProcess.on('exit', () => {\n      const manualCommand = `${whichEmulator()} @${name}`;\n      stopWaitingAndReject(\n        `The emulator (${name}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`\n      );\n    });\n  });\n}\n\nasync function maybeStartAnyEmulatorAsync(): Promise<boolean> {\n  const emulators = await getEmulatorsAsync();\n  if (emulators.length > 0) {\n    await maybeStartEmulatorAsync(emulators[0]);\n    return true;\n  }\n  return false;\n}\n\nexport function isPlatformSupported(): boolean {\n  return (\n    process.platform === 'darwin' || process.platform === 'win32' || process.platform === 'linux'\n  );\n}\n\nasync function adbAlreadyRunning(adb: string): Promise<boolean> {\n  try {\n    const result = await spawnAsync(adb, ['start-server']);\n    const lines = trim(result.stderr).split(/\\r?\\n/);\n    return lines.includes('* daemon started successfully') === false;\n  } catch (e) {\n    let errorMessage = trim(e.stderr || e.stdout);\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function getAdbOutputAsync(args: string[]): Promise<string> {\n  await Binaries.addToPathAsync('adb');\n  const adb = whichADB();\n\n  if (_isAdbOwner === null) {\n    const alreadyRunning = await adbAlreadyRunning(adb);\n    _isAdbOwner = alreadyRunning === false;\n  }\n\n  try {\n    const result = await spawnAsync(adb, args);\n    return result.stdout;\n  } catch (e) {\n    let errorMessage = (e.stderr || e.stdout || e.message).trim();\n    if (errorMessage.startsWith(BEGINNING_OF_ADB_ERROR_MESSAGE)) {\n      errorMessage = errorMessage.substring(BEGINNING_OF_ADB_ERROR_MESSAGE.length);\n    }\n    throw new Error(errorMessage);\n  }\n}\n\n// Device attached\nasync function _isDeviceAttachedAsync() {\n  const output = await getAdbOutputAsync(['devices']);\n  const devices = output\n    .trim()\n    .split(/\\r?\\n/)\n    .reduce<string[]>((previous, line) => {\n      const [name, type] = line.split(/[ ,\\t]+/).filter(Boolean);\n      return type === 'device' ? previous.concat(name) : previous;\n    }, []);\n  return devices.length > 0;\n}\n\nasync function _isDeviceAuthorizedAsync() {\n  const devices = await getAdbOutputAsync(['devices']);\n  const lines = devices.trim().split(/\\r?\\n/);\n  lines.shift();\n  const listOfDevicesWithoutFirstLine = lines.join('\\n');\n  // result looks like \"072c4cf200e333c7  device\" when authorized\n  // and \"072c4cf200e333c7  unauthorized\" when not.\n  return listOfDevicesWithoutFirstLine.includes('device');\n}\n\n// Expo installed\nasync function _isExpoInstalledAsync() {\n  const packages = await getAdbOutputAsync(['shell', 'pm', 'list', 'packages', '-f']);\n  const lines = packages.split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    if (line.includes('host.exp.exponent.test')) {\n      continue;\n    }\n\n    if (line.includes('host.exp.exponent')) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// async function _expoVersionAsync() {\n//   const info = await getAdbOutputAsync(['shell', 'dumpsys', 'package', 'host.exp.exponent']);\n\n//   const regex = /versionName=([0-9.]+)/;\n//   const regexMatch = regex.exec(info);\n//   if (!regexMatch || regexMatch.length < 2) {\n//     return null;\n//   }\n\n//   return regexMatch[1];\n// }\n\n// NOTE(brentvatne): Temporarily remove this. We should take care of installing\n// automatically, not just warn.\nasync function _checkExpoUpToDateAsync() {\n  // let versions = await Versions.versionsAsync();\n  // let installedVersion = await _expoVersionAsync();\n  // if (!installedVersion || semver.lt(installedVersion, versions.androidVersion)) {\n  //   Logger.notifications.warn(\n  //     { code: NotificationCode.OLD_ANDROID_APP_VERSION },\n  //     'This version of the Expo app is out of date. Uninstall the app and run again to upgrade.'\n  //   );\n  // }\n}\n\nfunction _apkCacheDirectory() {\n  const dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  const dir = path.join(dotExpoHomeDirectory, 'android-apk-cache');\n  fs.mkdirpSync(dir);\n  return dir;\n}\n\nexport async function downloadApkAsync(\n  url?: string,\n  downloadProgressCallback?: (roundedProgress: number) => void\n) {\n  const versions = await Versions.versionsAsync();\n  const apkPath = path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`);\n\n  if (await fs.pathExists(apkPath)) {\n    return apkPath;\n  }\n\n  await Api.downloadAsync(\n    url || versions.androidUrl,\n    path.join(_apkCacheDirectory(), `Exponent-${versions.androidVersion}.apk`),\n    undefined,\n    downloadProgressCallback\n  );\n  return apkPath;\n}\n\nexport async function installExpoAsync(url?: string) {\n  const bar = new ProgressBar('Downloading the Expo client app [:bar] :percent :etas', {\n    total: 100,\n    width: 40,\n  });\n\n  let warningTimer: NodeJS.Timeout;\n  const setWarningTimer = () => {\n    if (warningTimer) {\n      clearTimeout(warningTimer);\n    }\n    return setTimeout(() => {\n      Logger.global.info('');\n      Logger.global.info(\n        'This download is taking longer than expected. You can also try downloading the clients from the website at https://expo.io/tools'\n      );\n    }, INSTALL_WARNING_TIMEOUT);\n  };\n\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const path = await downloadApkAsync(url, progress => bar.tick(1, progress));\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  Logger.global.info(`Installing Expo on device`);\n  Logger.notifications.info({ code: NotificationCode.START_LOADING });\n  warningTimer = setWarningTimer();\n  const result = await getAdbOutputAsync(['install', path]);\n  Logger.notifications.info({ code: NotificationCode.STOP_LOADING });\n\n  clearTimeout(warningTimer);\n  return result;\n}\n\nexport async function uninstallExpoAsync(): Promise<string | undefined> {\n  Logger.global.info('Uninstalling Expo from Android device.');\n\n  // we need to check if its installed, else we might bump into \"Failure [DELETE_FAILED_INTERNAL_ERROR]\"\n  const isInstalled = await _isExpoInstalledAsync();\n  if (!isInstalled) {\n    return;\n  }\n\n  try {\n    return await getAdbOutputAsync(['uninstall', 'host.exp.exponent']);\n  } catch (e) {\n    Logger.global.error(\n      'Could not uninstall Expo client from your device, please uninstall Expo client manually and try again.'\n    );\n    throw e;\n  }\n}\n\nexport async function upgradeExpoAsync(url?: string): Promise<boolean> {\n  try {\n    await attemptToStartEmulatorOrAssertAsync();\n\n    await uninstallExpoAsync();\n    await installExpoAsync(url);\n    if (_lastUrl) {\n      Logger.global.info(`Opening ${_lastUrl} in Expo.`);\n      await getAdbOutputAsync([\n        'shell',\n        'am',\n        'start',\n        '-a',\n        'android.intent.action.VIEW',\n        '-d',\n        _lastUrl,\n      ]);\n      _lastUrl = null;\n    }\n\n    return true;\n  } catch (e) {\n    Logger.global.error(e.message);\n    return false;\n  }\n}\n\n// Open Url\nexport async function assertDeviceReadyAsync() {\n  const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n\n  if (!(await _isDeviceAuthorizedAsync())) {\n    throw new Error(\n      `This computer is not authorized to debug the device. Please follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n    );\n  }\n}\n\nasync function _openUrlAsync(url: string) {\n  // NOTE(brentvatne): temporary workaround! launch expo client first, then\n  // launch the project!\n  // https://github.com/expo/expo/issues/7772\n  // adb shell monkey -p host.exp.exponent -c android.intent.category.LAUNCHER 1\n  const openClient = await getAdbOutputAsync([\n    'shell',\n    'monkey',\n    '-p',\n    'host.exp.exponent',\n    '-c',\n    'android.intent.category.LAUNCHER',\n    '1',\n  ]);\n  if (openClient.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openClient.substring(openClient.indexOf('Error: ')));\n  }\n\n  const openProject = await getAdbOutputAsync([\n    'shell',\n    'am',\n    'start',\n    '-a',\n    'android.intent.action.VIEW',\n    '-d',\n    url,\n  ]);\n  if (openProject.includes(CANT_START_ACTIVITY_ERROR)) {\n    throw new Error(openProject.substring(openProject.indexOf('Error: ')));\n  }\n\n  return openProject;\n}\n\nasync function attemptToStartEmulatorOrAssertAsync() {\n  if (!(await _isDeviceAttachedAsync())) {\n    // If no devices or emulators are attached we should attempt to open one.\n    if (!(await maybeStartAnyEmulatorAsync())) {\n      const genymotionMessage = `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`;\n      throw new Error(\n        `No Android connected device found, and no emulators could be started automatically.\\nPlease connect a device or create an emulator (https://docs.expo.io/workflow/android-studio-emulator).\\nThen follow the instructions here to enable USB debugging:\\n${genymotionMessage}`\n      );\n    }\n  }\n  await assertDeviceReadyAsync();\n}\n\nasync function openUrlAsync(url: string, isDetached: boolean = false): Promise<void> {\n  try {\n    await attemptToStartEmulatorOrAssertAsync();\n\n    let installedExpo = false;\n    if (!isDetached && !(await _isExpoInstalledAsync())) {\n      await installExpoAsync();\n      installedExpo = true;\n    }\n\n    if (!isDetached) {\n      _lastUrl = url;\n      _checkExpoUpToDateAsync(); // let this run in background\n    }\n\n    Logger.global.info(`Opening on Android device`);\n    try {\n      await _openUrlAsync(url);\n    } catch (e) {\n      if (isDetached) {\n        e.message = `Error running app. Have you installed the app already using Android Studio? Since you are detached you must build manually. ${e.message}`;\n      } else {\n        e.message = `Error running app. ${e.message}`;\n      }\n\n      throw e;\n    }\n\n    Analytics.logEvent('Open Url on Device', {\n      platform: 'android',\n      installedExpo,\n    });\n  } catch (e) {\n    e.message = `Error running adb: ${e.message}`;\n    throw e;\n  }\n}\n\nexport async function openProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await UrlUtils.constructManifestUrlAsync(projectRoot);\n    const { exp } = getConfig(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n\n    await openUrlAsync(projectUrl, !!exp.isDetached);\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\nexport async function openWebProjectAsync(\n  projectRoot: string\n): Promise<{ success: true; url: string } | { success: false; error: string }> {\n  try {\n    await startAdbReverseAsync(projectRoot);\n\n    const projectUrl = await getWebpackUrlAsync(projectRoot);\n    if (projectUrl === null) {\n      return {\n        success: false,\n        error: `The web project has not been started yet`,\n      };\n    }\n    await openUrlAsync(projectUrl, true);\n    return { success: true, url: projectUrl };\n  } catch (e) {\n    Logger.global.error(`Couldn't open the web project on Android: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// Adb reverse\nexport async function startAdbReverseAsync(projectRoot: string): Promise<boolean> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (const port of adbReversePorts) {\n    if (!(await adbReverse(port))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport async function stopAdbReverseAsync(projectRoot: string): Promise<void> {\n  const packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  const expRc = await readExpRcAsync(projectRoot);\n  const userDefinedAdbReversePorts = expRc.extraAdbReversePorts || [];\n\n  const adbReversePorts = [\n    packagerInfo.packagerPort,\n    packagerInfo.expoServerPort,\n    ...userDefinedAdbReversePorts,\n  ];\n\n  for (const port of adbReversePorts) {\n    await adbReverseRemove(port);\n  }\n}\n\nasync function adbReverse(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['reverse', `tcp:${port}`, `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    Logger.global.warn(`Couldn't adb reverse: ${e.message}`);\n    return false;\n  }\n}\n\nasync function adbReverseRemove(port: number) {\n  if (!(await _isDeviceAuthorizedAsync())) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['reverse', '--remove', `tcp:${port}`]);\n    return true;\n  } catch (e) {\n    // Don't send this to warn because we call this preemptively sometimes\n    Logger.global.debug(`Couldn't adb reverse remove: ${e.message}`);\n    return false;\n  }\n}\n\ntype DPIConstraint = {\n  dpi: 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\n  sizeMultiplier: number;\n};\n\nconst splashScreenDPIConstraints: readonly DPIConstraint[] = [\n  {\n    dpi: 'mdpi',\n    sizeMultiplier: 1,\n  },\n  {\n    dpi: 'hdpi',\n    sizeMultiplier: 1.5,\n  },\n  {\n    dpi: 'xhdpi',\n    sizeMultiplier: 2,\n  },\n  {\n    dpi: 'xxhdpi',\n    sizeMultiplier: 3,\n  },\n  {\n    dpi: 'xxxhdpi',\n    sizeMultiplier: 4,\n  },\n];\n\n/**\n * Checks whether `resizeMode` is set to `native` and if `true` analyzes provided images for splashscreen\n * providing `Logger` feedback upon problems.\n * @param projectDir - directory of the expo project\n * @since SDK33\n */\nexport async function checkSplashScreenImages(projectDir: string): Promise<void> {\n  const { exp } = getConfig(projectDir);\n\n  // return before SDK33\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    return;\n  }\n\n  const splashScreenMode = exp.android?.splash?.resizeMode ?? exp.splash?.resizeMode ?? 'contain';\n\n  // only mode `native` is handled by this check\n  if (splashScreenMode === 'contain' || splashScreenMode === 'cover') {\n    return;\n  }\n\n  const generalSplashImagePath = exp.splash?.image;\n  if (!generalSplashImagePath) {\n    Logger.global.warn(\n      `Couldn't read '${chalk.italic('splash.image')}' from ${chalk.italic(\n        'app.json'\n      )}. Provide asset that would serve as baseline splash image.`\n    );\n    return;\n  }\n  const generalSplashImage = await getImageDimensionsAsync(projectDir, generalSplashImagePath);\n  if (!generalSplashImage) {\n    Logger.global.warn(\n      `Couldn't read dimensions of provided splash image '${chalk.italic(\n        generalSplashImagePath\n      )}'. Does the file exist?`\n    );\n    return;\n  }\n\n  const androidSplash = exp.android?.splash;\n  const androidSplashImages = [];\n  for (const { dpi, sizeMultiplier } of splashScreenDPIConstraints) {\n    const imageRelativePath = androidSplash?.[dpi];\n    if (imageRelativePath) {\n      const splashImage = await getImageDimensionsAsync(projectDir, imageRelativePath);\n      if (!splashImage) {\n        Logger.global.warn(\n          `Couldn't read dimensions of provided splash image '${chalk.italic(\n            imageRelativePath\n          )}'. Does the file exist?`\n        );\n        continue;\n      }\n      const { width, height } = splashImage;\n      const expectedWidth = sizeMultiplier * generalSplashImage.width;\n      const expectedHeight = sizeMultiplier * generalSplashImage.height;\n      androidSplashImages.push({\n        dpi,\n        width,\n        height,\n        expectedWidth,\n        expectedHeight,\n        sizeMatches: width === expectedWidth && height === expectedHeight,\n      });\n    }\n  }\n\n  if (androidSplashImages.length === 0) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native', but you haven't provided any images for different DPIs.\nBe aware that your splash image will be used as xxxhdpi asset and its ${chalk.bold(\n      'actual size will be different'\n    )} depending on device's DPI.\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n    return;\n  }\n\n  if (androidSplashImages.some(({ sizeMatches }) => !sizeMatches)) {\n    Logger.global\n      .warn(`Splash resizeMode is set to 'native' and you've provided different images for different DPIs,\nbut their sizes mismatch expected ones: [dpi: provided (expected)] ${androidSplashImages\n      .map(\n        ({ dpi, width, height, expectedWidth, expectedHeight }) =>\n          `${dpi}: ${width}x${height} (${expectedWidth}x${expectedHeight})`\n      )\n      .join(', ')}\nSee https://docs.expo.io/guides/splash-screens/#splash-screen-api-limitations-on-android for more information`);\n  }\n}\n\nexport async function maybeStopAdbDaemonAsync() {\n  if (_isAdbOwner !== true) {\n    return false;\n  }\n\n  try {\n    await getAdbOutputAsync(['kill-server']);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],"file":"../Android.js","sourceRoot":"/@expo/xdl@57.9.28/src"}