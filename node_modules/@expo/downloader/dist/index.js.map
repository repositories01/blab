{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;AAAA,oDAA4B;AAC5B,+BAAiC;AAEjC,wDAA0B;AAC1B,8CAAsB;AAEtB,MAAM,QAAQ,GAAG,gBAAS,CAAC,gBAAM,CAAC,QAAQ,CAAC,CAAC;AAE5C,KAAK,UAAU,YAAY,CAAC,MAAc,EAAE,UAAkB,EAAE,OAAgB;IAC9E,IAAI;QACF,MAAM,QAAQ,CAAC,aAAG,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,kBAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC;KACnF;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,kBAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAC5B,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,KAAK,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,KAAK,EAAE,CAAC,CAAC;KAChF;AACH,CAAC;AAED,kBAAe,YAAY,CAAC","sourcesContent":["import stream from 'stream';\nimport { promisify } from 'util';\n\nimport fs from 'fs-extra';\nimport got from 'got';\n\nconst pipeline = promisify(stream.pipeline);\n\nasync function downloadFile(srcUrl: string, outputPath: string, timeout?: number): Promise<void> {\n  try {\n    await pipeline(got.stream(srcUrl, { timeout }), fs.createWriteStream(outputPath));\n  } catch (err) {\n    await fs.remove(outputPath);\n    throw new Error(`Failed to download the file: ${err?.message}\\n${err?.stack}`);\n  }\n}\n\nexport default downloadFile;\n"]}