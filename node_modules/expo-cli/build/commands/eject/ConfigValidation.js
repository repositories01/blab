"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOrPromptForBundleIdentifier = getOrPromptForBundleIdentifier;
exports.getOrPromptForPackage = getOrPromptForPackage;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _terminalLink() {
  const data = _interopRequireDefault(require("terminal-link"));

  _terminalLink = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _prompt() {
  const data = _interopRequireDefault(require("../../prompt"));

  _prompt = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const noBundleIdMessage = `Your project must have a \`bundleIdentifier\` set in the Expo config (app.json or app.config.js).\nSee https://expo.fyi/bundle-identifier`;
const noPackageMessage = `Your project must have a \`package\` set in the Expo config (app.json or app.config.js).\nSee https://expo.fyi/android-package`;

function validateBundleId(value) {
  return /^[a-zA-Z][a-zA-Z0-9\-.]+$/.test(value);
}

function validatePackage(value) {
  return /^[a-zA-Z][a-zA-Z0-9_]*(\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(value);
}

async function getOrPromptForBundleIdentifier(projectRoot) {
  var _exp$ios, _exp$android, _exp$android2;

  const {
    exp
  } = (0, _config().getConfig)(projectRoot);
  const currentBundleId = (_exp$ios = exp.ios) === null || _exp$ios === void 0 ? void 0 : _exp$ios.bundleIdentifier;

  if (currentBundleId) {
    if (validateBundleId(currentBundleId)) {
      return currentBundleId;
    }

    (0, _log().default)(_log().default.chalk.red(`The ios.bundleIdentifier defined in your Expo config is not formatted properly. Only alphanumeric characters, '.', '-', and '_' are allowed, and each '.' must be followed by a letter.`));
    process.exit(1);
  } // Recommend a bundle ID based on the username and project slug.


  let recommendedBundleId; // Attempt to use the android package name first since it's convenient to have them aligned.

  if (((_exp$android = exp.android) === null || _exp$android === void 0 ? void 0 : _exp$android.package) && validateBundleId((_exp$android2 = exp.android) === null || _exp$android2 === void 0 ? void 0 : _exp$android2.package)) {
    var _exp$android3;

    recommendedBundleId = (_exp$android3 = exp.android) === null || _exp$android3 === void 0 ? void 0 : _exp$android3.package;
  } else {
    var _exp$owner;

    const username = (_exp$owner = exp.owner) !== null && _exp$owner !== void 0 ? _exp$owner : await _xdl().UserManager.getCurrentUsernameAsync();
    const possibleId = `com.${username}.${exp.slug}`;

    if (username && validateBundleId(possibleId)) {
      recommendedBundleId = possibleId;
    }
  }

  _log().default.newLine();

  (0, _log().default)(_log().default.chalk.cyan(`Now we need to know your ${(0, _terminalLink().default)('iOS bundle identifier', 'https://expo.fyi/bundle-identifier')}.\nYou can change this in the future if you need to.`));

  _log().default.newLine(); // Prompt the user for the bundle ID.
  // Even if the project is using a dynamic config we can still
  // prompt a better error message, recommend a default value, and help the user
  // validate their custom bundle ID upfront.


  const {
    bundleIdentifier
  } = await (0, _prompt().default)([{
    name: 'bundleIdentifier',
    default: recommendedBundleId,
    // The Apple helps people know this isn't an EAS feature.
    message: `What would you like your iOS bundle identifier to be?`,
    validate: validateBundleId
  }], {
    nonInteractiveHelp: noBundleIdMessage
  });
  await attemptModification(projectRoot, `Your iOS bundle identifier is now: ${bundleIdentifier}`, {
    ios: {
      bundleIdentifier
    }
  });
  return bundleIdentifier;
}

async function getOrPromptForPackage(projectRoot) {
  var _exp$android4, _exp$ios2;

  const {
    exp
  } = (0, _config().getConfig)(projectRoot);
  const currentPackage = (_exp$android4 = exp.android) === null || _exp$android4 === void 0 ? void 0 : _exp$android4.package;

  if (currentPackage) {
    if (validatePackage(currentPackage)) {
      return currentPackage;
    }

    (0, _log().default)(_log().default.chalk.red(`Invalid format of Android package name. Only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter.`));
    process.exit(1);
  } // Recommend a package name based on the username and project slug.


  let recommendedPackage; // Attempt to use the ios bundle id first since it's convenient to have them aligned.

  if (((_exp$ios2 = exp.ios) === null || _exp$ios2 === void 0 ? void 0 : _exp$ios2.bundleIdentifier) && validatePackage(exp.ios.bundleIdentifier)) {
    recommendedPackage = exp.ios.bundleIdentifier;
  } else {
    var _exp$owner2;

    const username = (_exp$owner2 = exp.owner) !== null && _exp$owner2 !== void 0 ? _exp$owner2 : await _xdl().UserManager.getCurrentUsernameAsync();
    const possibleId = `com.${username}.${exp.slug}`;

    if (username && validatePackage(possibleId)) {
      recommendedPackage = possibleId;
    }
  }

  _log().default.newLine();

  (0, _log().default)(`Now we need to know your ${(0, _terminalLink().default)('Android package', 'https://expo.fyi/android-package')}. You can change this in the future if you need to.`);

  _log().default.newLine(); // Prompt the user for the android package.
  // Even if the project is using a dynamic config we can still
  // prompt a better error message, recommend a default value, and help the user
  // validate their custom android package upfront.


  const {
    packageName
  } = await (0, _prompt().default)([{
    name: 'packageName',
    default: recommendedPackage,
    message: `What would you like your Android package to be named?`,
    validate: validatePackage
  }], {
    nonInteractiveHelp: noPackageMessage
  });
  await attemptModification(projectRoot, `Your Android package is now: ${packageName}`, {
    android: {
      package: packageName
    }
  });
  return packageName;
}

async function attemptModification(projectRoot, modificationSuccessMessage, edits) {
  const modification = await (0, _config().modifyConfigAsync)(projectRoot, edits, {
    skipSDKVersionRequirement: true
  });

  if (modification.type === 'success') {
    _log().default.newLine();

    (0, _log().default)(modificationSuccessMessage);

    _log().default.newLine();
  } else {
    warnAboutConfigAndExit(modification.type, modification.message, edits);
  }
}

function logNoConfig() {
  (0, _log().default)(_log().default.chalk.yellow('No Expo config was found. Please create an Expo config (`app.config.js` or `app.json`) in your project root.'));
}

function warnAboutConfigAndExit(type, message, edits) {
  _log().default.newLine();

  if (type === 'warn') {
    // The project is using a dynamic config, give the user a helpful log and bail out.
    (0, _log().default)(_log().default.chalk.yellow(message));
  } else {
    logNoConfig();
  }

  notifyAboutManualConfigEdits(edits);
  process.exit(1);
}

function notifyAboutManualConfigEdits(edits) {
  (0, _log().default)(_log().default.chalk.cyan(`Please add the following to your Expo config, and try again... `));

  _log().default.newLine();

  (0, _log().default)(JSON.stringify(edits, null, 2));

  _log().default.newLine();
}
//# sourceMappingURL=ConfigValidation.js.map