{"version":3,"sources":["../../../src/commands/eject/ConfigValidation.ts"],"names":["noBundleIdMessage","noPackageMessage","validateBundleId","value","test","validatePackage","getOrPromptForBundleIdentifier","projectRoot","exp","currentBundleId","ios","bundleIdentifier","log","chalk","red","process","exit","recommendedBundleId","android","package","username","owner","UserManager","getCurrentUsernameAsync","possibleId","slug","newLine","cyan","name","default","message","validate","nonInteractiveHelp","attemptModification","getOrPromptForPackage","currentPackage","recommendedPackage","packageName","modificationSuccessMessage","edits","modification","skipSDKVersionRequirement","type","warnAboutConfigAndExit","logNoConfig","yellow","notifyAboutManualConfigEdits","JSON","stringify"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig, modifyConfigAsync } from '@expo/config';\nimport { UserManager } from '@expo/xdl';\nimport terminalLink from 'terminal-link';\n\nimport log from '../../log';\nimport prompt from '../../prompt';\n\nconst noBundleIdMessage = `Your project must have a \\`bundleIdentifier\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/bundle-identifier`;\nconst noPackageMessage = `Your project must have a \\`package\\` set in the Expo config (app.json or app.config.js).\\nSee https://expo.fyi/android-package`;\n\nfunction validateBundleId(value: string): boolean {\n  return /^[a-zA-Z][a-zA-Z0-9\\-.]+$/.test(value);\n}\n\nfunction validatePackage(value: string): boolean {\n  return /^[a-zA-Z][a-zA-Z0-9_]*(\\.[a-zA-Z][a-zA-Z0-9_]*)+$/.test(value);\n}\n\nexport async function getOrPromptForBundleIdentifier(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot);\n\n  const currentBundleId = exp.ios?.bundleIdentifier;\n  if (currentBundleId) {\n    if (validateBundleId(currentBundleId)) {\n      return currentBundleId;\n    }\n\n    log(\n      log.chalk.red(\n        `The ios.bundleIdentifier defined in your Expo config is not formatted properly. Only alphanumeric characters, '.', '-', and '_' are allowed, and each '.' must be followed by a letter.`\n      )\n    );\n\n    process.exit(1);\n  }\n\n  // Recommend a bundle ID based on the username and project slug.\n  let recommendedBundleId: string | undefined;\n  // Attempt to use the android package name first since it's convenient to have them aligned.\n  if (exp.android?.package && validateBundleId(exp.android?.package)) {\n    recommendedBundleId = exp.android?.package;\n  } else {\n    const username = exp.owner ?? (await UserManager.getCurrentUsernameAsync());\n    const possibleId = `com.${username}.${exp.slug}`;\n    if (username && validateBundleId(possibleId)) {\n      recommendedBundleId = possibleId;\n    }\n  }\n\n  log.newLine();\n  log(\n    log.chalk.cyan(\n      `Now we need to know your ${terminalLink(\n        'iOS bundle identifier',\n        'https://expo.fyi/bundle-identifier'\n      )}.\\nYou can change this in the future if you need to.`\n    )\n  );\n  log.newLine();\n\n  // Prompt the user for the bundle ID.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom bundle ID upfront.\n  const { bundleIdentifier } = await prompt(\n    [\n      {\n        name: 'bundleIdentifier',\n        default: recommendedBundleId,\n        // The Apple helps people know this isn't an EAS feature.\n        message: `What would you like your iOS bundle identifier to be?`,\n        validate: validateBundleId,\n      },\n    ],\n    {\n      nonInteractiveHelp: noBundleIdMessage,\n    }\n  );\n\n  await attemptModification(projectRoot, `Your iOS bundle identifier is now: ${bundleIdentifier}`, {\n    ios: { bundleIdentifier },\n  });\n\n  return bundleIdentifier;\n}\n\nexport async function getOrPromptForPackage(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot);\n\n  const currentPackage = exp.android?.package;\n  if (currentPackage) {\n    if (validatePackage(currentPackage)) {\n      return currentPackage;\n    }\n    log(\n      log.chalk.red(\n        `Invalid format of Android package name. Only alphanumeric characters, '.' and '_' are allowed, and each '.' must be followed by a letter.`\n      )\n    );\n\n    process.exit(1);\n  }\n\n  // Recommend a package name based on the username and project slug.\n  let recommendedPackage: string | undefined;\n  // Attempt to use the ios bundle id first since it's convenient to have them aligned.\n  if (exp.ios?.bundleIdentifier && validatePackage(exp.ios.bundleIdentifier)) {\n    recommendedPackage = exp.ios.bundleIdentifier;\n  } else {\n    const username = exp.owner ?? (await UserManager.getCurrentUsernameAsync());\n    const possibleId = `com.${username}.${exp.slug}`;\n    if (username && validatePackage(possibleId)) {\n      recommendedPackage = possibleId;\n    }\n  }\n\n  log.newLine();\n  log(\n    `Now we need to know your ${terminalLink(\n      'Android package',\n      'https://expo.fyi/android-package'\n    )}. You can change this in the future if you need to.`\n  );\n  log.newLine();\n\n  // Prompt the user for the android package.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom android package upfront.\n  const { packageName } = await prompt(\n    [\n      {\n        name: 'packageName',\n        default: recommendedPackage,\n        message: `What would you like your Android package to be named?`,\n        validate: validatePackage,\n      },\n    ],\n    {\n      nonInteractiveHelp: noPackageMessage,\n    }\n  );\n\n  await attemptModification(projectRoot, `Your Android package is now: ${packageName}`, {\n    android: { package: packageName },\n  });\n\n  return packageName;\n}\n\nasync function attemptModification(\n  projectRoot: string,\n  modificationSuccessMessage: string,\n  edits: Partial<ExpoConfig>\n): Promise<void> {\n  const modification = await modifyConfigAsync(projectRoot, edits, {\n    skipSDKVersionRequirement: true,\n  });\n  if (modification.type === 'success') {\n    log.newLine();\n    log(modificationSuccessMessage);\n    log.newLine();\n  } else {\n    warnAboutConfigAndExit(modification.type, modification.message!, edits);\n  }\n}\n\nfunction logNoConfig() {\n  log(\n    log.chalk.yellow(\n      'No Expo config was found. Please create an Expo config (`app.config.js` or `app.json`) in your project root.'\n    )\n  );\n}\n\nfunction warnAboutConfigAndExit(type: string, message: string, edits: Partial<ExpoConfig>) {\n  log.newLine();\n  if (type === 'warn') {\n    // The project is using a dynamic config, give the user a helpful log and bail out.\n    log(log.chalk.yellow(message));\n  } else {\n    logNoConfig();\n  }\n\n  notifyAboutManualConfigEdits(edits);\n  process.exit(1);\n}\n\nfunction notifyAboutManualConfigEdits(edits: Partial<ExpoConfig>) {\n  log(log.chalk.cyan(`Please add the following to your Expo config, and try again... `));\n  log.newLine();\n  log(JSON.stringify(edits, null, 2));\n  log.newLine();\n}\n"],"file":"ConfigValidation.js"}