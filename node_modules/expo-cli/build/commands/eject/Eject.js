"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ejectAsync = ejectAsync;
exports.mergeGitIgnoreFiles = mergeGitIgnoreFiles;
exports.stripDashes = stripDashes;
exports.isPkgMainExpoAppEntry = isPkgMainExpoAppEntry;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _jsonFile() {
  const data = _interopRequireDefault(require("@expo/json-file"));

  _jsonFile = function () {
    return data;
  };

  return data;
}

function PackageManager() {
  const data = _interopRequireWildcard(require("@expo/package-manager"));

  PackageManager = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _commander() {
  const data = _interopRequireDefault(require("commander"));

  _commander = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _npmPackageArg() {
  const data = _interopRequireDefault(require("npm-package-arg"));

  _npmPackageArg = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _pacote() {
  const data = _interopRequireDefault(require("pacote"));

  _pacote = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

function _tempy() {
  const data = _interopRequireDefault(require("tempy"));

  _tempy = function () {
    return data;
  };

  return data;
}

function _terminalLink() {
  const data = _interopRequireDefault(require("terminal-link"));

  _terminalLink = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _prompt() {
  const data = _interopRequireDefault(require("../../prompt"));

  _prompt = function () {
    return data;
  };

  return data;
}

function _configureAndroidProjectAsync() {
  const data = _interopRequireDefault(require("../apply/configureAndroidProjectAsync"));

  _configureAndroidProjectAsync = function () {
    return data;
  };

  return data;
}

function _configureIOSProjectAsync() {
  const data = _interopRequireDefault(require("../apply/configureIOSProjectAsync"));

  _configureIOSProjectAsync = function () {
    return data;
  };

  return data;
}

function _ProjectUtils() {
  const data = require("../utils/ProjectUtils");

  _ProjectUtils = function () {
    return data;
  };

  return data;
}

function _logConfigWarnings() {
  const data = require("../utils/logConfigWarnings");

  _logConfigWarnings = function () {
    return data;
  };

  return data;
}

function _maybeBailOnGitStatusAsync() {
  const data = _interopRequireDefault(require("../utils/maybeBailOnGitStatusAsync"));

  _maybeBailOnGitStatusAsync = function () {
    return data;
  };

  return data;
}

function _ConfigValidation() {
  const data = require("./ConfigValidation");

  _ConfigValidation = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const EXPO_APP_ENTRY = 'node_modules/expo/AppEntry.js';
/**
 * Entry point into the eject process, delegates to other helpers to perform various steps.
 *
 * 1. Verify git is clean
 * 2. Create native projects (ios, android)
 * 3. Install node modules
 * 4. Apply config to native projects
 * 5. Install CocoaPods
 * 6. Log project info
 */

async function ejectAsync(projectRoot, options) {
  if (await (0, _maybeBailOnGitStatusAsync().default)()) return;
  await createNativeProjectsFromTemplateAsync(projectRoot);
  await installNodeModulesAsync(projectRoot); // Apply Expo config to native projects

  await configureIOSStepAsync(projectRoot);
  await configureAndroidStepAsync(projectRoot);
  const podsInstalled = await installPodsAsync(projectRoot);
  await warnIfDependenciesRequireAdditionalSetupAsync(projectRoot);

  _log().default.newLine();

  _log().default.nested(`‚û°Ô∏è  ${_chalk().default.bold('Next steps')}`);

  _log().default.nested(`- üëÜ Review the logs above and look for any warnings (‚ö†Ô∏è ) that might need follow-up.`);

  _log().default.nested(`- üí° You may want to run ${_chalk().default.bold('npx @react-native-community/cli doctor')} to help install any tools that your app may need to run your native projects.`);

  if (!podsInstalled) {
    _log().default.nested(`- üç´ When CocoaPods is installed, initialize the project workspace: ${_chalk().default.bold('cd ios && pod install')}`);
  }

  _log().default.nested(`- üîë Download your Android keystore (if you're not sure if you need to, just run the command and see): ${_chalk().default.bold('expo fetch:android:keystore')}`);

  if (await (0, _ProjectUtils().usesOldExpoUpdatesAsync)(projectRoot)) {
    _log().default.nested(`- üöÄ ${(0, _terminalLink().default)('expo-updates', 'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md')} has been configured in your project. Before you do a release build, make sure you run ${_chalk().default.bold('expo publish')}. ${(0, _terminalLink().default)('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`);
  }

  _log().default.newLine();

  _log().default.nested(`‚òëÔ∏è  ${_chalk().default.bold('When you are ready to run your project')}`);

  _log().default.nested('To compile and run your project in development, execute one of the following commands:');

  const packageManager = PackageManager().isUsingYarn(projectRoot) ? 'yarn' : 'npm';

  _log().default.nested(`- ${_chalk().default.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}`);

  _log().default.nested(`- ${_chalk().default.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);

  _log().default.nested(`- ${_chalk().default.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);
}

async function configureIOSStepAsync(projectRoot) {
  _log().default.newLine();

  const applyingIOSConfigStep = logNewSection('Applying iOS configuration');
  await (0, _configureIOSProjectAsync().default)(projectRoot);

  if (_config().WarningAggregator.hasWarningsIOS()) {
    applyingIOSConfigStep.stopAndPersist({
      symbol: '‚ö†Ô∏è ',
      text: _chalk().default.red('iOS configuration applied with warnings that should be fixed:')
    });
    (0, _logConfigWarnings().logConfigWarningsIOS)();
  } else {
    applyingIOSConfigStep.succeed('All project configuration applied to iOS project');
  }

  _log().default.newLine();
}

async function installPodsAsync(projectRoot) {
  _log().default.newLine();

  let step = logNewSection('Installing CocoaPods.');

  if (process.platform !== 'darwin') {
    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');
    return false;
  }

  const packageManager = new (PackageManager().CocoaPodsPackageManager)({
    cwd: _path().default.join(projectRoot, 'ios'),
    log: _log().default,
    silent: !process.env.EXPO_DEBUG
  });

  if (!(await packageManager.isCLIInstalledAsync())) {
    try {
      // prompt user -- do you want to install cocoapods right now?
      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';
      step.render();
      await PackageManager().CocoaPodsPackageManager.installCLIAsync({
        nonInteractive: _commander().default.nonInteractive,
        spawnOptions: packageManager.options
      });
      step.succeed('Installed CocoaPods CLI');
      step = logNewSection('Running `pod install` in the `ios` directory.');
    } catch (e) {
      step.stopAndPersist({
        symbol: '‚ö†Ô∏è ',
        text: _chalk().default.red('Unable to install the CocoaPods CLI. Continuing with ejecting, you can install CocoaPods afterwards.')
      });

      if (e.message) {
        (0, _log().default)(`- ${e.message}`);
      }

      return false;
    }
  }

  try {
    await packageManager.installAsync();
    step.succeed('Installed pods and initialized Xcode workspace.');
    return true;
  } catch (e) {
    step.stopAndPersist({
      symbol: '‚ö†Ô∏è ',
      text: _chalk().default.red('Something when wrong running `pod install` in the `ios` directory. Continuing with ejecting, you can debug this afterwards.')
    });

    if (e.message) {
      (0, _log().default)(`- ${e.message}`);
    }

    return false;
  }
}
/**
 * Wraps PackageManager to install node modules and adds CLI logs.
 *
 * @param projectRoot
 */


async function installNodeModulesAsync(projectRoot) {
  const installingDependenciesStep = logNewSection('Installing JavaScript dependencies.');
  await _fsExtra().default.remove('node_modules');
  const packageManager = PackageManager().createForProject(projectRoot, {
    log: _log().default,
    silent: true
  });

  try {
    await packageManager.installAsync();
    installingDependenciesStep.succeed('Installed JavaScript dependencies.');
  } catch (e) {
    installingDependenciesStep.fail(_chalk().default.red(`Something when wrong installing JavaScript dependencies, check your ${packageManager.name} logfile or run ${_chalk().default.bold(`${packageManager.name.toLowerCase()} install`)} again manually.`)); // TODO: actually show the error message from the package manager! :O

    process.exit(1);
  }
}

async function configureAndroidStepAsync(projectRoot) {
  const applyingAndroidConfigStep = logNewSection('Applying Android configuration');
  await (0, _configureAndroidProjectAsync().default)(projectRoot);

  if (_config().WarningAggregator.hasWarningsAndroid()) {
    applyingAndroidConfigStep.stopAndPersist({
      symbol: '‚ö†Ô∏è ',
      text: _chalk().default.red('Android configuration applied with warnings that should be fixed:')
    });
    (0, _logConfigWarnings().logConfigWarningsAndroid)();
  } else {
    applyingAndroidConfigStep.succeed('All project configuration applied to Android project');
  }
}

function logNewSection(title) {
  const spinner = (0, _ora().default)(_chalk().default.bold(title));
  spinner.start();
  return spinner;
}

async function createNativeProjectsFromTemplateAsync(projectRoot) {
  var _appJson$expo, _appJson$expo$android, _appJson$expo$ios;

  // We need the SDK version to proceed
  let exp;
  let pkg;

  try {
    const config = (0, _config().getConfig)(projectRoot);
    exp = config.exp;
    pkg = config.pkg;
  } catch (error) {
    // TODO(Bacon): Currently this is already handled in the command
    console.log();
    console.log(_chalk().default.red(error.message));
    console.log();
    process.exit(1);
  } // Validate that the template exists


  const sdkMajorVersionNumber = _semver().default.major(exp.sdkVersion);

  const templateSpec = (0, _npmPackageArg().default)(`expo-template-bare-minimum@sdk-${sdkMajorVersionNumber}`);

  try {
    await _pacote().default.manifest(templateSpec);
  } catch (e) {
    if (e.code === 'E404') {
      throw new Error(`Unable to eject because an eject template for SDK ${sdkMajorVersionNumber} was not found.`);
    } else {
      throw e;
    }
  }
  /**
   * Set names to be used for the native projects and configure appEntry so users can continue
   * to use Expo client on ejected projects, even though we change the "main" to index.js for bare.
   *
   * TODO: app.config.js will become more prominent and we can't depend on
   * being able to write to the config
   */


  const {
    configPath,
    configName
  } = (0, _config().findConfigFile)(projectRoot);
  const configBuffer = await _fsExtra().default.readFile(configPath);
  const appJson = ['app.json', 'app.config.json'].includes(configName) ? JSON.parse(configBuffer.toString()) : {}; // Just to be sure

  appJson.expo = (_appJson$expo = appJson.expo) !== null && _appJson$expo !== void 0 ? _appJson$expo : {};
  const name = await promptForNativeAppNameAsync(projectRoot);
  appJson.expo.name = name; // Prompt for the Android package first because it's more strict than the bundle identifier
  // this means you'll have a better chance at matching the bundle identifier with the package name.

  const packageName = await (0, _ConfigValidation().getOrPromptForPackage)(projectRoot);
  appJson.expo.android = (_appJson$expo$android = appJson.expo.android) !== null && _appJson$expo$android !== void 0 ? _appJson$expo$android : {};
  appJson.expo.android.package = packageName;
  const bundleIdentifier = await (0, _ConfigValidation().getOrPromptForBundleIdentifier)(projectRoot);
  appJson.expo.ios = (_appJson$expo$ios = appJson.expo.ios) !== null && _appJson$expo$ios !== void 0 ? _appJson$expo$ios : {};
  appJson.expo.ios.bundleIdentifier = bundleIdentifier; // TODO: remove entryPoint and log about it for sdk 37 changes

  if (appJson.expo.entryPoint && appJson.expo.entryPoint !== EXPO_APP_ENTRY) {
    (0, _log().default)(`- expo.entryPoint is already configured, we recommend using "${EXPO_APP_ENTRY}`);
  } else {
    appJson.expo.entryPoint = EXPO_APP_ENTRY;
  }

  const updatingAppConfigStep = logNewSection('Updating app configuration (app.json)');
  await _fsExtra().default.writeFile(_path().default.resolve('app.json'), JSON.stringify(appJson, null, 2)); // TODO: if app.config.js, need to provide some other info here

  updatingAppConfigStep.succeed('App configuration (app.json) updated.');
  /**
   * Extract the template and copy the ios and android directories over to the project directory
   */

  let defaultDependencies = {};
  let defaultDevDependencies = {}; // NOTE(brentvatne): Removing spaces between steps for now, add back when
  // there is some additioanl context for steps
  // log.newLine();

  const creatingNativeProjectStep = logNewSection('Creating native project directories (./ios and ./android) and updating .gitignore');
  let tempDir;

  try {
    tempDir = _tempy().default.directory();
    await _xdl().Exp.extractTemplateAppAsync(templateSpec, tempDir, appJson.expo);

    _fsExtra().default.copySync(_path().default.join(tempDir, 'ios'), _path().default.join(projectRoot, 'ios'));

    _fsExtra().default.copySync(_path().default.join(tempDir, 'android'), _path().default.join(projectRoot, 'android'));

    _fsExtra().default.copySync(_path().default.join(tempDir, 'index.js'), _path().default.join(projectRoot, 'index.js'));

    mergeGitIgnoreFiles(_path().default.join(projectRoot, '.gitignore'), _path().default.join(tempDir, '.gitignore'));

    const {
      dependencies,
      devDependencies
    } = _jsonFile().default.read(_path().default.join(tempDir, 'package.json'));

    defaultDependencies = createDependenciesMap(dependencies);
    defaultDevDependencies = createDependenciesMap(devDependencies);
    creatingNativeProjectStep.succeed('Created native project directories (./ios and ./android) and updated .gitignore.');
  } catch (e) {
    (0, _log().default)(_chalk().default.red(e.message));
    creatingNativeProjectStep.fail('Failed to create the native project - see the output above for more information.');
    (0, _log().default)(_chalk().default.yellow('You may want to delete the `./ios` and/or `./android` directories before running eject again.'));
    process.exit(1);
  }
  /**
   * Add metro config, or warn if metro config already exists. The developer will need to add the
   * hashAssetFiles plugin manually.
   */


  const updatingMetroConfigStep = logNewSection('Adding Metro bundler configuration');

  try {
    if (_fsExtra().default.existsSync(_path().default.join(projectRoot, 'metro.config.js')) || _fsExtra().default.existsSync(_path().default.join(projectRoot, 'metro.config.json')) || pkg.metro || _fsExtra().default.existsSync(_path().default.join(projectRoot, 'rn-cli.config.js'))) {
      throw new Error('Existing Metro configuration found; not overwriting.');
    }

    _fsExtra().default.copySync(_path().default.join(tempDir, 'metro.config.js'), _path().default.join(projectRoot, 'metro.config.js'));

    updatingMetroConfigStep.succeed('Added Metro bundler configuration.');
  } catch (e) {
    updatingMetroConfigStep.stopAndPersist({
      symbol: '‚ö†Ô∏è ',
      text: _chalk().default.red('Metro bundler configuration not applied:')
    });

    _log().default.nested(`- ${e.message}`);

    _log().default.nested(`- You will need to add the ${_chalk().default.bold('hashAssetFiles')} plugin to your Metro configuration. ${(0, _terminalLink().default)('Example.', 'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md#metroconfigjs')}`);

    _log().default.newLine();
  }
  /**
   * Update package.json scripts - `npm start` should default to `react-native
   * start` rather than `expo start` after ejecting, for example.
   */
  // NOTE(brentvatne): Removing spaces between steps for now, add back when
  // there is some additioanl context for steps
  // log.newLine();


  const updatingPackageJsonStep = logNewSection('Updating your package.json scripts, dependencies, and main file');

  if (!pkg.scripts) {
    pkg.scripts = {};
  }

  delete pkg.scripts.eject;
  pkg.scripts.start = 'react-native start';
  pkg.scripts.ios = 'react-native run-ios';
  pkg.scripts.android = 'react-native run-android';
  /**
   * Update package.json dependencies by combining the dependencies in the project we are ejecting
   * with the dependencies in the template project. Does the same for devDependencies.
   *
   * - The template may have some dependencies beyond react/react-native/react-native-unimodules,
   *   for example RNGH and Reanimated. We should prefer the version that is already being used
   *   in the project for those, but swap the react/react-native/react-native-unimodules versions
   *   with the ones in the template.
   * - The same applies to expo-updates -- since some native project configuration may depend on the
   *   version, we should always use the version of expo-updates in the template.
   */

  const combinedDependencies = createDependenciesMap({ ...defaultDependencies,
    ...pkg.dependencies
  });

  for (const dependenciesKey of ['react', 'react-native-unimodules', 'react-native', 'expo-updates']) {
    combinedDependencies[dependenciesKey] = defaultDependencies[dependenciesKey];
  }

  const combinedDevDependencies = createDependenciesMap({ ...defaultDevDependencies,
    ...pkg.devDependencies
  }); // Save the dependencies

  pkg.dependencies = combinedDependencies;
  pkg.devDependencies = combinedDevDependencies;
  /**
   * Add new app entry points
   */

  let removedPkgMain; // Check that the pkg.main doesn't match:
  // - ./node_modules/expo/AppEntry
  // - ./node_modules/expo/AppEntry.js
  // - node_modules/expo/AppEntry.js
  // - expo/AppEntry.js
  // - expo/AppEntry

  if (!isPkgMainExpoAppEntry(pkg.main) && pkg.main !== 'index.js' && pkg.main) {
    // Save the custom
    removedPkgMain = pkg.main;
  }

  delete pkg.main;
  await _fsExtra().default.writeFile(_path().default.resolve('package.json'), JSON.stringify(pkg, null, 2));
  updatingPackageJsonStep.succeed('Updated package.json and added index.js entry point for iOS and Android.');

  if (removedPkgMain) {
    (0, _log().default)(`- Removed ${_chalk().default.bold(`"main": "${removedPkgMain}"`)} from package.json because we recommend using index.js as main instead.`);

    _log().default.newLine();
  }
}
/**
 * Create an object of type DependenciesMap a dependencies object or throw if not valid.
 *
 * @param dependencies - ideally an object of type {[key]: string} - if not then this will error.
 */


function createDependenciesMap(dependencies) {
  if (typeof dependencies !== 'object') {
    throw new Error(`Dependency map is invalid, expected object but got ${typeof dependencies}`);
  }

  const outputMap = {};
  if (!dependencies) return outputMap;

  for (const key of Object.keys(dependencies)) {
    const value = dependencies[key];

    if (typeof value === 'string') {
      outputMap[key] = value;
    } else {
      throw new Error(`Dependency for key \`${key}\` should be a \`string\`, instead got: \`{ ${key}: ${JSON.stringify(value)} }\``);
    }
  }

  return outputMap;
}

async function promptForNativeAppNameAsync(projectRoot) {
  const {
    exp
  } = await (0, _config().readConfigJsonAsync)(projectRoot);
  let {
    name
  } = exp;

  if (!name) {
    (0, _log().default)('First, we want to clarify what names we should use for your app:');
    ({
      name
    } = await (0, _prompt().default)([{
      name: 'name',
      message: "What should your app appear as on a user's home screen?",
      default: exp.name,

      validate({
        length
      }) {
        return length ? true : 'App display name cannot be empty.';
      }

    }], {
      nonInteractiveHelp: 'Please specify "expo.name" in app.json / app.config.js.'
    }));

    _log().default.newLine();
  }

  return name;
}
/**
 * Merge two gitignore files together and add a generated header.
 *
 * @param targetGitIgnorePath
 * @param sourceGitIgnorePath
 */


function mergeGitIgnoreFiles(targetGitIgnorePath, sourceGitIgnorePath) {
  if (!_fsExtra().default.existsSync(targetGitIgnorePath)) {
    // No gitignore in the project already, no need to merge anything into anything. I guess they
    // are not using git :O
    return null;
  }

  if (!_fsExtra().default.existsSync(sourceGitIgnorePath)) {
    // Maybe we don't have a gitignore in the template project
    return null;
  }

  const targetGitIgnore = _fsExtra().default.readFileSync(targetGitIgnorePath).toString();

  const sourceGitIgnore = _fsExtra().default.readFileSync(sourceGitIgnorePath).toString();

  const merged = mergeGitIgnoreContents(targetGitIgnore, sourceGitIgnore);

  _fsExtra().default.writeFileSync(targetGitIgnorePath, merged);

  return merged;
}
/**
 * Merge the contents of two gitignores together and add a generated header.
 *
 * @param targetGitIgnore contents of the existing gitignore
 * @param sourceGitIgnore contents of the extra gitignore
 */


function mergeGitIgnoreContents(targetGitIgnore, sourceGitIgnore) {
  // TODO(Bacon): Add version this section with a tag (expo-cli@x.x.x)
  return `${targetGitIgnore}
# The following contents were automatically generated by expo-cli during eject
# ----------------------------------------------------------------------------

${sourceGitIgnore}`;
}
/**
 * Some packages are not configured automatically on eject and may require
 * users to add some code, eg: to their AppDelegate.
 */


async function warnIfDependenciesRequireAdditionalSetupAsync(projectRoot) {
  // We just need the custom `nodeModulesPath` from the config.
  const {
    exp,
    pkg
  } = (0, _config().getConfig)(projectRoot, {
    skipSDKVersionRequirement: true
  });
  const pkgsWithExtraSetup = await _jsonFile().default.readAsync((0, _config().resolveModule)('expo/requiresExtraSetup.json', projectRoot, exp));
  const packagesToWarn = Object.keys(pkg.dependencies).filter(pkgName => pkgName in pkgsWithExtraSetup);

  if (packagesToWarn.length === 0) {
    return;
  }

  _log().default.newLine();

  const warnAdditionalSetupStep = logNewSection('Checking if any additional setup steps are required for installed SDK packages.');
  const plural = packagesToWarn.length > 1;
  warnAdditionalSetupStep.stopAndPersist({
    symbol: '‚ö†Ô∏è ',
    text: _chalk().default.red(`Your app includes ${_chalk().default.bold(`${packagesToWarn.length}`)} package${plural ? 's' : ''} that require${plural ? '' : 's'} additional setup in order to run:`)
  });
  packagesToWarn.forEach(pkgName => {
    _log().default.nested(`- ${_chalk().default.bold(pkgName)}: ${pkgsWithExtraSetup[pkgName]}`);
  });
}

function stripDashes(s) {
  return s.replace(/\s|-/g, '');
}
/**
 * Returns true if the input string matches the default expo main field.
 *
 * - ./node_modules/expo/AppEntry
 * - ./node_modules/expo/AppEntry.js
 * - node_modules/expo/AppEntry.js
 * - expo/AppEntry.js
 * - expo/AppEntry
 *
 * @param input package.json main field
 */


function isPkgMainExpoAppEntry(input) {
  const main = input || '';

  if (main.startsWith('./')) {
    return main.includes('node_modules/expo/AppEntry');
  }

  return main.includes('expo/AppEntry');
}
//# sourceMappingURL=Eject.js.map