{"version":3,"sources":["../../src/commands/init.ts"],"names":["FEATURED_TEMPLATES","shortName","name","description","BARE_WORKFLOW_TEMPLATES","isMacOS","process","platform","action","projectDir","command","options","yes","yarn","npm","template","undefined","parentDir","dirName","root","path","resolve","dirname","basename","validationResult","validateName","CommandError","parent","nonInteractive","cwd","templateSpec","registry","escapedName","raw","descriptionColumn","Math","max","map","t","length","type","message","pageSize","choices","prompt","separator","value","chalk","bold","stdout","columns","short","nonInteractiveHelp","initialConfig","templateManifest","pacote","manifest","isBare","includes","promptForBareConfig","promptForManagedConfig","packageManager","PackageManager","shouldUseYarn","log","newLine","extractTemplateStep","logNewSection","projectPath","Exp","extractAndPrepareTemplateAppAsync","join","expo","slug","succeed","e","fail","initGitRepoAsync","silent","commit","installJsDepsStep","installDependenciesAsync","cdPath","relative","podsInstalled","installPodsAsync","_","didConfigureUpdatesProjectFiles","username","UserManager","getCurrentUsernameAsync","configureUpdatesProjectFilesAsync","showPublishBeforeBuildWarning","logProjectReadyAsync","workflow","nested","macOSComment","projectRoot","exp","androidManifestPath","AndroidConfig","Manifest","getProjectAndroidManifestPathAsync","Error","androidManifestJSON","readAndroidManifestAsync","result","Updates","setUpdatesConfig","writeAndroidManifestAsync","supportingDirectory","IosPlist","modifyAsync","expoPlist","IOSConfig","cleanBackupAsync","step","CocoaPodsPackageManager","getenv","boolish","isCLIInstalledAsync","text","render","installCLIAsync","program","spawnOptions","stopAndPersist","symbol","red","installAsync","title","spinner","start","test","dir","isNonExistentOrEmptyDir","validateProjectName","fs","statSync","isDirectory","readdirSync","error","code","projectName","default","filter","trim","validate","alias","option","asyncAction"],"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","sourcesContent":["import { AndroidConfig, BareAppConfig, ExpoConfig, IOSConfig, getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport { Exp, IosPlist, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program, { Command } from 'commander';\nimport fs from 'fs';\nimport getenv from 'getenv';\nimport padEnd from 'lodash/padEnd';\nimport trimStart from 'lodash/trimStart';\nimport npmPackageArg from 'npm-package-arg';\nimport ora from 'ora';\nimport pacote from 'pacote';\nimport path from 'path';\nimport terminalLink from 'terminal-link';\nimport wordwrap from 'wordwrap';\n\nimport CommandError from '../CommandError';\nimport log from '../log';\nimport prompt from '../prompt';\nimport { usesOldExpoUpdatesAsync } from './utils/ProjectUtils';\n\ntype Options = {\n  template?: string;\n  npm: boolean;\n  yarn: boolean;\n  yes: boolean;\n  name?: string;\n};\n\nconst FEATURED_TEMPLATES = [\n  '----- Managed workflow -----',\n  {\n    shortName: 'blank',\n    name: 'expo-template-blank',\n    description: 'a minimal app as clean as an empty canvas',\n  },\n  {\n    shortName: 'blank (TypeScript)',\n    name: 'expo-template-blank-typescript',\n    description: 'same as blank but with TypeScript configuration',\n  },\n  {\n    shortName: 'tabs (TypeScript)',\n    name: 'expo-template-tabs',\n    description: 'several example screens and tabs using react-navigation and TypeScript',\n  },\n  '----- Bare workflow -----',\n  {\n    shortName: 'minimal',\n    name: 'expo-template-bare-minimum',\n    description: 'bare and minimal, just the essentials to get you started',\n  },\n  {\n    shortName: 'minimal (TypeScript)',\n    name: 'expo-template-bare-typescript',\n    description: 'same as minimal but with TypeScript configuration',\n  },\n];\n\nconst BARE_WORKFLOW_TEMPLATES = ['expo-template-bare-minimum', 'expo-template-bare-typescript'];\nconst isMacOS = process.platform === 'darwin';\n\nasync function action(projectDir: string, command: Command) {\n  const options: Options = {\n    yes: !!command.yes,\n    yarn: !!command.yarn,\n    npm: !!command.npm,\n    template: command.template,\n    /// XXX(ville): this is necessary because with Commander.js, when the --name\n    // option is not set, `command.name` will point to `Command.prototype.name`.\n    name: typeof command.name === 'string' ? ((command.name as unknown) as string) : undefined,\n  };\n  if (options.yes) {\n    projectDir = '.';\n    if (!options.template) {\n      options.template = 'blank';\n    }\n  }\n\n  let parentDir;\n  let dirName;\n\n  if (projectDir) {\n    const root = path.resolve(projectDir);\n    parentDir = path.dirname(root);\n    dirName = path.basename(root);\n    const validationResult = validateName(parentDir, dirName);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_DIR', validationResult);\n    }\n  } else if (command.parent && command.parent.nonInteractive) {\n    throw new CommandError(\n      'NON_INTERACTIVE',\n      'The project dir argument is required in non-interactive mode.'\n    );\n  } else {\n    parentDir = process.cwd();\n  }\n\n  let templateSpec;\n  if (options.template) {\n    templateSpec = npmPackageArg(options.template);\n\n    // For backwards compatibility, 'blank' and 'tabs' are aliases for\n    // 'expo-template-blank' and 'expo-template-tabs', respectively.\n    if (\n      (templateSpec.name === 'blank' ||\n        templateSpec.name === 'tabs' ||\n        templateSpec.name === 'bare-minimum') &&\n      templateSpec.registry\n    ) {\n      templateSpec.escapedName = `expo-template-${templateSpec.name}`;\n      templateSpec.name = templateSpec.escapedName;\n      templateSpec.raw = templateSpec.escapedName;\n    }\n  } else {\n    const descriptionColumn =\n      Math.max(...FEATURED_TEMPLATES.map(t => (typeof t === 'object' ? t.shortName.length : 0))) +\n      2;\n    const { template } = await prompt(\n      {\n        type: 'list',\n        name: 'template',\n        message: 'Choose a template:',\n        pageSize: 20,\n        choices: FEATURED_TEMPLATES.map(template => {\n          if (typeof template === 'string') {\n            return prompt.separator(template);\n          } else {\n            return {\n              value: template.name,\n              name:\n                chalk.bold(padEnd(template.shortName, descriptionColumn)) +\n                trimStart(\n                  wordwrap(\n                    descriptionColumn + 2,\n                    process.stdout.columns || 80\n                  )(template.description)\n                ),\n              short: template.name,\n            };\n          }\n        }),\n      },\n      {\n        nonInteractiveHelp:\n          '--template: argument is required in non-interactive mode. Valid choices are: \"blank\", \"tabs\", \"bare-minimum\" or any custom template (name of npm package).',\n      }\n    );\n    templateSpec = npmPackageArg(template);\n  }\n\n  let initialConfig;\n  const templateManifest = await pacote.manifest(templateSpec);\n  const isBare = BARE_WORKFLOW_TEMPLATES.includes(templateManifest.name);\n  if (isBare) {\n    initialConfig = await promptForBareConfig(parentDir, dirName, options);\n  } else {\n    initialConfig = await promptForManagedConfig(parentDir, dirName, options);\n  }\n\n  let packageManager: 'npm' | 'yarn' = 'npm';\n  if (options.yarn) {\n    packageManager = 'yarn';\n  } else if (options.npm) {\n    packageManager = 'npm';\n  } else if (PackageManager.shouldUseYarn()) {\n    packageManager = 'yarn';\n    log.newLine();\n    log('🧶 Using Yarn to install packages. You can pass --npm to use npm instead.');\n    log.newLine();\n  } else {\n    packageManager = 'npm';\n    log.newLine();\n    log('📦 Using npm to install packages. You can pass --yarn to use Yarn instead.');\n    log.newLine();\n  }\n\n  const extractTemplateStep = logNewSection('Downloading and extracting project files.');\n  let projectPath;\n  try {\n    projectPath = await Exp.extractAndPrepareTemplateAppAsync(\n      templateSpec,\n      path.join(\n        parentDir,\n        dirName || ('expo' in initialConfig ? initialConfig.expo.slug : initialConfig.name)\n      ),\n      initialConfig\n    );\n    extractTemplateStep.succeed('Downloaded and extracted project files.');\n  } catch (e) {\n    extractTemplateStep.fail(\n      'Something went wrong in downloading and extracting the project files.'\n    );\n    throw e;\n  }\n\n  // for now, we will just init a git repo if they have git installed and the\n  // project is not inside an existing git tree, and do it silently. we should\n  // at some point check if git is installed and actually bail out if not, because\n  // npm install will fail with a confusing error if so.\n  try {\n    // check if git is installed\n    // check if inside git repo\n    await Exp.initGitRepoAsync(projectPath, { silent: true, commit: true });\n  } catch {\n    // todo: check if git is installed, bail out\n  }\n\n  const installJsDepsStep = logNewSection('Installing JavaScript dependencies.');\n  try {\n    await Exp.installDependenciesAsync(projectPath, packageManager, { silent: true });\n    installJsDepsStep.succeed('Installed JavaScript dependencies.');\n  } catch {\n    installJsDepsStep.fail(\n      `Something when wrong installing JavaScript dependencies. Check your ${packageManager} logs. Continuing to initialize the app.`\n    );\n  }\n\n  let cdPath = path.relative(process.cwd(), projectPath);\n  if (cdPath.length > projectPath.length) {\n    cdPath = projectPath;\n  }\n  if (isBare) {\n    let podsInstalled = false;\n    try {\n      podsInstalled = await installPodsAsync(projectPath);\n    } catch (_) {}\n\n    let didConfigureUpdatesProjectFiles = false;\n    const username = await UserManager.getCurrentUsernameAsync();\n    if (username) {\n      try {\n        await configureUpdatesProjectFilesAsync(\n          projectPath,\n          initialConfig as BareAppConfig,\n          username\n        );\n        didConfigureUpdatesProjectFiles = true;\n      } catch {}\n    }\n\n    log.newLine();\n    const showPublishBeforeBuildWarning = await usesOldExpoUpdatesAsync(projectPath);\n    await logProjectReadyAsync({\n      cdPath,\n      packageManager,\n      workflow: 'bare',\n      showPublishBeforeBuildWarning,\n      didConfigureUpdatesProjectFiles,\n      username,\n    });\n    if (!podsInstalled && isMacOS) {\n      log.newLine();\n      log.nested(\n        `⚠️  Before running your app on iOS, make sure you have CocoaPods installed and initialize the project:`\n      );\n      log.nested('');\n      log.nested(`  cd ${cdPath ?? '.'}/ios`);\n      log.nested(`  pod install`);\n      log.nested('');\n    }\n  } else {\n    log.newLine();\n    await logProjectReadyAsync({ cdPath, packageManager, workflow: 'managed' });\n  }\n}\n\nfunction logProjectReadyAsync({\n  cdPath,\n  packageManager,\n  workflow,\n  showPublishBeforeBuildWarning,\n  didConfigureUpdatesProjectFiles,\n  username,\n}: {\n  cdPath: string;\n  packageManager: string;\n  workflow: 'managed' | 'bare';\n  showPublishBeforeBuildWarning?: boolean;\n  didConfigureUpdatesProjectFiles?: boolean;\n  username?: string | null;\n}) {\n  log.nested(chalk.bold(`✅ Your project is ready!`));\n  log.newLine();\n\n  // empty string if project was created in current directory\n  if (cdPath) {\n    log.nested(\n      `To run your project, navigate to the directory and run one of the following ${packageManager} commands.`\n    );\n    log.newLine();\n    log.nested(`- ${chalk.bold('cd ' + cdPath)}`);\n  } else {\n    log.nested(`To run your project, run one of the following ${packageManager} commands.`);\n    log.newLine();\n  }\n\n  if (workflow === 'managed') {\n    log.nested(\n      `- ${chalk.bold(\n        `${packageManager} start`\n      )} # you can open iOS, Android, or web from here, or run them directly with the commands below.`\n    );\n  }\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run android' : 'yarn android')}`);\n\n  let macOSComment = '';\n  if (!isMacOS && workflow === 'bare') {\n    macOSComment =\n      ' # you need to use macOS to build the iOS project - use managed workflow if you need to do iOS development without a Mac';\n  } else if (!isMacOS && workflow === 'managed') {\n    macOSComment = ' # requires an iOS device or macOS for access to an iOS simulator';\n  }\n  log.nested(\n    `- ${chalk.bold(packageManager === 'npm' ? 'npm run ios' : 'yarn ios')}${macOSComment}`\n  );\n\n  log.nested(`- ${chalk.bold(packageManager === 'npm' ? 'npm run web' : 'yarn web')}`);\n\n  if (workflow === 'bare') {\n    log.newLine();\n    log.nested(\n      `💡 You can also open up the projects in the ${chalk.bold('ios')} and ${chalk.bold(\n        'android'\n      )} directories with their respective IDEs.`\n    );\n\n    if (showPublishBeforeBuildWarning) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. Before you do a release build, make sure you run ${chalk.bold(\n          'expo publish'\n        )}. ${terminalLink('Learn more.', 'https://expo.fyi/release-builds-with-expo-updates')}`\n      );\n    } else if (didConfigureUpdatesProjectFiles) {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been configured in your project. If you publish this project under a different user account than ${chalk.bold(\n          username\n        )}, you'll need to update the configuration in Expo.plist and AndroidManifest.xml before making a release build.`\n      );\n    } else {\n      log.nested(\n        `🚀 ${terminalLink(\n          'expo-updates',\n          'https://github.com/expo/expo/blob/master/packages/expo-updates/README.md'\n        )} has been installed in your project. Before you do a release build, you'll need to configure a few values in Expo.plist and AndroidManifest.xml in order for updates to work.`\n      );\n    }\n    // TODO: add equivalent of this or some command to wrap it:\n    // # ios\n    // $ open -a Xcode ./ios/{PROJECT_NAME}.xcworkspace\n    // # android\n    // $ open -a /Applications/Android\\\\ Studio.app ./android\n  }\n}\n\nasync function configureUpdatesProjectFilesAsync(\n  projectRoot: string,\n  initialConfig: BareAppConfig,\n  username: string\n) {\n  const { exp } = await getConfig(projectRoot);\n\n  // apply Android config\n  const androidManifestPath = await AndroidConfig.Manifest.getProjectAndroidManifestPathAsync(\n    projectRoot\n  );\n  if (!androidManifestPath) {\n    throw new Error(`Could not find AndroidManifest.xml in project directory: \"${projectRoot}\"`);\n  }\n  const androidManifestJSON = await AndroidConfig.Manifest.readAndroidManifestAsync(\n    androidManifestPath\n  );\n  const result = await AndroidConfig.Updates.setUpdatesConfig(exp, androidManifestJSON, username);\n  await AndroidConfig.Manifest.writeAndroidManifestAsync(androidManifestPath, result);\n\n  // apply iOS config\n  const supportingDirectory = path.join(projectRoot, 'ios', initialConfig.name, 'Supporting');\n  try {\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', expoPlist => {\n      return IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n    });\n  } finally {\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'Expo', false);\n  }\n}\n\nasync function installPodsAsync(projectRoot: string) {\n  let step = logNewSection('Installing CocoaPods.');\n  if (!isMacOS) {\n    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');\n    return false;\n  }\n  const packageManager = new PackageManager.CocoaPodsPackageManager({\n    cwd: path.join(projectRoot, 'ios'),\n    log,\n    silent: getenv.boolish('EXPO_DEBUG', true),\n  });\n\n  if (!(await packageManager.isCLIInstalledAsync())) {\n    try {\n      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';\n      step.render();\n      await PackageManager.CocoaPodsPackageManager.installCLIAsync({\n        nonInteractive: program.nonInteractive,\n        spawnOptions: packageManager.options,\n      });\n      step.succeed('Installed CocoaPods CLI');\n      step = logNewSection('Running `pod install` in the `ios` directory.');\n    } catch (e) {\n      step.stopAndPersist({\n        symbol: '⚠️ ',\n        text: chalk.red(\n          'Unable to install the CocoaPods CLI. Continuing with initializing the project, you can install CocoaPods afterwards.'\n        ),\n      });\n      if (e.message) {\n        log(`- ${e.message}`);\n      }\n      return false;\n    }\n  }\n\n  try {\n    await packageManager.installAsync();\n    step.succeed('Installed pods and initialized Xcode workspace.');\n    return true;\n  } catch (e) {\n    step.stopAndPersist({\n      symbol: '⚠️ ',\n      text: chalk.red(\n        'Something when wrong running `pod install` in the `ios` directory. Continuing with initializing the project, you can debug this afterwards.'\n      ),\n    });\n    if (e.message) {\n      log(`- ${e.message}`);\n    }\n    return false;\n  }\n}\n\nfunction logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  spinner.start();\n  return spinner;\n}\n\nfunction validateName(parentDir: string, name: string | undefined) {\n  if (typeof name !== 'string' || name === '') {\n    return 'The project name can not be empty.';\n  }\n  if (!/^[a-z0-9@.\\-_]+$/i.test(name)) {\n    return 'The project name can only contain URL-friendly characters.';\n  }\n  const dir = path.join(parentDir, name);\n  if (!isNonExistentOrEmptyDir(dir)) {\n    return `The path \"${dir}\" already exists. Please choose a different parent directory or project name.`;\n  }\n  return true;\n}\n\nfunction validateProjectName(name: string) {\n  return (\n    /^[a-z0-9]+$/i.test(name) || 'Project name can only include ASCII characters A-Z, a-z and 0-9'\n  );\n}\n\nfunction isNonExistentOrEmptyDir(dir: string) {\n  try {\n    return fs.statSync(dir).isDirectory() && fs.readdirSync(dir).length === 0;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return true;\n    }\n    throw error;\n  }\n}\n\nasync function promptForBareConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<BareAppConfig> {\n  let projectName: string;\n  if (dirName) {\n    const validationResult = validateProjectName(dirName);\n    if (validationResult !== true) {\n      throw new CommandError('INVALID_PROJECT_NAME', validationResult);\n    }\n    projectName = dirName;\n  } else {\n    ({ projectName } = await prompt({\n      name: 'projectName',\n      message: 'What would you like to name your app?',\n      default: 'my-app',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateProjectName(name),\n    }));\n  }\n\n  return {\n    name: projectName,\n    expo: {\n      name: options.name || projectName,\n      slug: projectName,\n    },\n  };\n}\n\nasync function promptForManagedConfig(\n  parentDir: string,\n  dirName: string | undefined,\n  options: Options\n): Promise<{ expo: Pick<ExpoConfig, 'name' | 'slug'> }> {\n  let slug;\n  if (dirName) {\n    slug = dirName;\n  } else {\n    ({ slug } = await prompt({\n      name: 'slug',\n      message: 'What would you like to name your app?',\n      default: 'my-app',\n      filter: (name: string) => name.trim(),\n      validate: (name: string) => validateName(parentDir, name),\n    }));\n  }\n  const expo = { name: slug, slug };\n  if (options.name) {\n    expo.name = options.name;\n  }\n  return { expo };\n}\n\nexport default function (program: Command) {\n  program\n    .command('init [project-dir]')\n    .alias('i')\n    .description(\n      'Initializes a directory with an example project. Run it without any options and you will be prompted for the name and type.'\n    )\n    .option(\n      '-t, --template [name]',\n      'Specify which template to use. Valid options are \"blank\", \"tabs\", \"bare-minimum\" or a package on npm (e.g. \"expo-template-bare-typescript\") that includes an Expo project template.'\n    )\n    .option('--npm', 'Use npm to install dependencies. (default when Yarn is not installed)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when Yarn is installed)')\n    .option('--name [name]', 'The name of your app visible on the home screen.')\n    .option('--yes', 'Use default options. Same as \"expo init . --template blank')\n    .asyncAction(action);\n}\n"],"file":"init.js"}