{"version":3,"sources":["../../src/commands/upgrade.ts"],"names":["logNewSection","title","spinner","chalk","bold","start","maybeFormatSdkVersion","sdkVersionString","semver","valid","coerce","getUpdatedDependenciesAsync","projectRoot","workflow","targetSdkVersion","exp","pkg","ConfigUtils","getConfig","bundledNativeModules","JsonFile","readAsync","resolveModule","projectDependencies","dependencies","devDependencies","getDependenciesFromBundledNativeModules","sdkVersion","result","Object","keys","forEach","name","log","warn","expoReactNativeTag","facebookReactNativeVersion","facebookReactVersion","relatedPackages","makeBreakingChangesToConfigAsync","targetSdkVersionString","step","currentExp","dynamicConfigPath","skipSDKVersionRequirement","succeed","rootConfig","readConfigJsonAsync","expo","androidNavigationBar","visible","undefined","writeConfigJsonAsync","stopAndPersist","symbol","text","red","e","fail","message","maybeBailOnUnsafeFunctionalityAsync","Versions","gteSdkVersion","program","nonInteractive","answer","type","attemptOldUpdate","newLine","stopExpoServerAsync","status","Project","currentStatus","stopAsync","underline","addNewLineIfNone","shouldBailWhenUsingLatest","currentSdkVersionString","attemptUpdateAgain","shouldUpgradeSimulatorAsync","Simulator","isPlatformSupported","default","upgradeSimulator","maybeUpgradeSimulatorAsync","upgradeExpoAsync","error","shouldUpgradeEmulatorAsync","Android","upgradeAndroid","maybeUpgradeEmulatorAsync","upgradeAsync","requestedSdkVersion","options","sdkVersions","releasedSdkVersionsAsync","latestSdkVersion","newestReleasedSdkVersionAsync","latestSdkVersionString","version","platforms","updateToLatestSdkVersion","sdkVersionStringOptions","filter","v","lte","selectedSdkVersionString","pageSize","choices","map","value","includes","attemptUnknownUpdate","packageManager","PackageManager","createForProject","npm","yarn","silent","getenv","boolish","expoPackageToInstall","installingPackageStep","addAsync","removingSdkVersionStep","_","updatingPackagesStep","updates","_version","devDependenciesAsStringArray","dependenciesAsStringArray","length","addDevAsync","join","maybeCleanNpmStateAsync","clearingCacheStep","startReactNativeServerAsync","reset","nonPersistent","stopReactNativeServerAsync","green","grey","allDependencies","untouchedDependencies","releaseNoteUrl","gray","skippedSdkVersions","_data","lt","gt","skippedSdkVersionKeys","releaseNotesUrls","values","data","reverse","url","NpmPackageManager","cleaningNpmStateStep","shouldInstallNodeModules","removeLockfileAsync","cleanAsync","reinstallingNodeModulesStep","installAsync","command","alias","option","description","asyncAction","process","cwd"],"mappings":"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","sourcesContent":["import * as ConfigUtils from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport * as PackageManager from '@expo/package-manager';\nimport { Android, Project, Simulator, Versions } from '@expo/xdl';\nimport chalk from 'chalk';\nimport program, { Command } from 'commander';\nimport getenv from 'getenv';\nimport difference from 'lodash/difference';\nimport pickBy from 'lodash/pickBy';\nimport ora from 'ora';\nimport semver from 'semver';\nimport terminalLink from 'terminal-link';\n\nimport log from '../log';\nimport prompt from '../prompt';\nimport { findProjectRootAsync } from './utils/ProjectUtils';\nimport maybeBailOnGitStatusAsync from './utils/maybeBailOnGitStatusAsync';\n\ntype DependencyList = Record<string, string>;\n\ntype Options = {\n  npm?: boolean;\n  yarn?: boolean;\n};\n\nexport type ExpoWorkflow = 'managed' | 'bare';\n\nexport type TargetSDKVersion = Pick<\n  Versions.SDKVersion,\n  'expoReactNativeTag' | 'facebookReactVersion' | 'facebookReactNativeVersion' | 'relatedPackages'\n>;\n\nfunction logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  spinner.start();\n  return spinner;\n}\n\nexport function maybeFormatSdkVersion(sdkVersionString: string | null): string | null {\n  if (typeof sdkVersionString !== 'string' || sdkVersionString === 'UNVERSIONED') {\n    return sdkVersionString;\n  }\n\n  // semver.valid type doesn't accept null, so need to ensure we pass a string\n  return semver.valid(semver.coerce(sdkVersionString) || '');\n}\n\n/**\n * Produce a list of dependencies used by the project that need to be updated\n */\nexport async function getUpdatedDependenciesAsync(\n  projectRoot: string,\n  workflow: ExpoWorkflow,\n  targetSdkVersion: TargetSDKVersion | null\n): Promise<DependencyList> {\n  // Get the updated version for any bundled modules\n  const { exp, pkg } = ConfigUtils.getConfig(projectRoot);\n  const bundledNativeModules = (await JsonFile.readAsync(\n    ConfigUtils.resolveModule('expo/bundledNativeModules.json', projectRoot, exp)\n  )) as DependencyList;\n\n  // Smoosh regular and dev dependencies together for now\n  const projectDependencies = { ...pkg.dependencies, ...pkg.devDependencies };\n\n  return getDependenciesFromBundledNativeModules({\n    projectDependencies,\n    bundledNativeModules,\n    sdkVersion: exp.sdkVersion,\n    workflow,\n    targetSdkVersion,\n  });\n}\n\nexport type UpgradeDependenciesOptions = {\n  projectDependencies: DependencyList;\n  bundledNativeModules: DependencyList;\n  sdkVersion?: string;\n  workflow: ExpoWorkflow;\n  targetSdkVersion: TargetSDKVersion | null;\n};\n\nexport function getDependenciesFromBundledNativeModules({\n  projectDependencies,\n  bundledNativeModules,\n  sdkVersion,\n  workflow,\n  targetSdkVersion,\n}: UpgradeDependenciesOptions): DependencyList {\n  const result: DependencyList = {};\n\n  Object.keys(bundledNativeModules).forEach(name => {\n    if (projectDependencies[name]) {\n      result[name] = bundledNativeModules[name];\n    }\n  });\n\n  // If sdkVersion is known and jest-expo is used, then upgrade to the current sdk version\n  // jest-expo is versioned with expo because jest-expo mocks out the native SDKs used it expo.\n  if (sdkVersion && projectDependencies['jest-expo']) {\n    result['jest-expo'] = `^${sdkVersion}`;\n  }\n\n  if (!targetSdkVersion) {\n    log.warn(\n      `Supported react, react-native, and react-dom versions are unknown because we don't have version information for the target SDK, please update them manually.`\n    );\n    return result;\n  }\n\n  // Get the supported react/react-native/react-dom versions and other related packages\n  if (workflow === 'managed' || projectDependencies['expokit']) {\n    result[\n      'react-native'\n    ] = `https://github.com/expo/react-native/archive/${targetSdkVersion.expoReactNativeTag}.tar.gz`;\n  } else {\n    result['react-native'] = targetSdkVersion.facebookReactNativeVersion;\n  }\n\n  // React version apparently is optional in SDK version data\n  if (targetSdkVersion.facebookReactVersion) {\n    result['react'] = targetSdkVersion.facebookReactVersion;\n\n    // react-dom version is always the same as the react version\n    if (projectDependencies['react-dom']) {\n      result['react-dom'] = targetSdkVersion.facebookReactVersion;\n    }\n  }\n\n  // Update any related packages\n  if (targetSdkVersion.relatedPackages) {\n    Object.keys(targetSdkVersion.relatedPackages).forEach(name => {\n      if (projectDependencies[name]) {\n        result[name] = targetSdkVersion.relatedPackages![name];\n      }\n    });\n  }\n\n  return result;\n}\n\nasync function makeBreakingChangesToConfigAsync(\n  projectRoot: string,\n  targetSdkVersionString: string\n): Promise<void> {\n  const step = logNewSection(\n    'Updating your app.json to account for breaking changes (if applicable)...'\n  );\n\n  const { exp: currentExp, dynamicConfigPath } = ConfigUtils.getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n  });\n\n  // Bail out early if we have a dynamic config!\n  if (dynamicConfigPath) {\n    // IMPORTANT: this must be updated whenever you apply a new breaking change!\n    if (targetSdkVersionString === '37.0.0') {\n      step.succeed(\n        `Only static configuration files can be updated, please update ${dynamicConfigPath} manually according to the release notes.`\n      );\n    } else {\n      step.succeed('No additional changes necessary to app config.');\n    }\n    return;\n  }\n\n  const { rootConfig } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n  try {\n    switch (targetSdkVersionString) {\n      // IMPORTANT: adding a new case here? be sure to update the dynamic config situation above\n      case '37.0.0':\n        if (rootConfig?.expo?.androidNavigationBar?.visible !== undefined) {\n          if (rootConfig?.expo.androidNavigationBar?.visible === false) {\n            step.succeed(\n              `Updated \"androidNavigationBar.visible\" property in app.json to \"leanback\"...`\n            );\n            rootConfig.expo.androidNavigationBar.visible = 'leanback';\n          } else if (rootConfig?.expo.androidNavigationBar?.visible === true) {\n            step.succeed(\n              `Removed extraneous \"androidNavigationBar.visible\" property in app.json...`\n            );\n            delete rootConfig?.expo.androidNavigationBar?.visible;\n          } else {\n            // They had some invalid property for androidNavigationBar already...\n            step.succeed('No additional changes necessary to app.json config.');\n            return;\n          }\n          await ConfigUtils.writeConfigJsonAsync(projectRoot, rootConfig.expo);\n        } else if (currentExp?.androidNavigationBar?.visible !== undefined) {\n          step.stopAndPersist({\n            symbol: '⚠️ ',\n            text: chalk.red(\n              `Please manually update \"androidNavigationBar.visible\" according to ${terminalLink(\n                'this documentation',\n                'https://docs.expo.io/versions/latest/config/app/#androidnavigationbar'\n              )}`\n            ),\n          });\n        } else {\n          step.succeed('No additional changes necessary to app.json config.');\n        }\n        break;\n      default:\n        step.succeed('No additional changes necessary to app.json config.');\n    }\n  } catch (e) {\n    step.fail(\n      `Something went wrong when attempting to update app.json configuration: ${e.message}`\n    );\n  }\n}\n\nasync function maybeBailOnUnsafeFunctionalityAsync(\n  exp: Pick<ConfigUtils.ExpoConfig, 'sdkVersion'>\n): Promise<boolean> {\n  // Give people a chance to bail out if they're updating from a super old version because YMMV\n  if (!Versions.gteSdkVersion(exp, '33.0.0')) {\n    if (program.nonInteractive) {\n      log.warn(\n        `This command works best on SDK 33 and higher. Because the command is running in nonInteractive mode it'll continue regardless.`\n      );\n      return true;\n    }\n\n    const answer = await prompt({\n      type: 'confirm',\n      name: 'attemptOldUpdate',\n      message: `This command works best on SDK 33 and higher. We can try updating for you, but you will likely need to follow up with the instructions from https://docs.expo.io/workflow/upgrading-expo-sdk-walkthrough/. Continue anyways?`,\n    });\n\n    if (!answer.attemptOldUpdate) {\n      return true;\n    }\n\n    log.newLine();\n  }\n  return false;\n}\n\nasync function stopExpoServerAsync(projectRoot: string): Promise<void> {\n  // Can't upgrade if Expo is running\n  const status = await Project.currentStatus(projectRoot);\n  if (status === 'running') {\n    await Project.stopAsync(projectRoot);\n    log(\n      chalk.bold.underline(\n        'We found an existing expo-cli instance running for this project and closed it to continue.'\n      )\n    );\n    log.addNewLineIfNone();\n  }\n}\n\nasync function shouldBailWhenUsingLatest(\n  currentSdkVersionString: string,\n  targetSdkVersionString: string\n): Promise<boolean> {\n  // Maybe bail out early if people are trying to update to the current version\n  if (targetSdkVersionString === currentSdkVersionString) {\n    if (program.nonInteractive) {\n      log.warn(\n        `You are already using the latest SDK version but the command will continue because nonInteractive is enabled.`\n      );\n      log.newLine();\n      return false;\n    }\n    const answer = await prompt({\n      type: 'confirm',\n      name: 'attemptUpdateAgain',\n      message: `You are already using the latest SDK version. Do you want to run the update anyways? This may be useful to ensure that all of your packages are set to the correct version.`,\n    });\n\n    if (!answer.attemptUpdateAgain) {\n      log('Follow the Expo blog at https://blog.expo.io for new release information!');\n      log.newLine();\n      return true;\n    }\n\n    log.newLine();\n  }\n\n  return false;\n}\n\nasync function shouldUpgradeSimulatorAsync(): Promise<boolean> {\n  // Check if we can, and probably should, upgrade the (ios) simulator\n  if (Simulator.isPlatformSupported()) {\n    if (program.nonInteractive) {\n      log.warn(`Skipping attempt to upgrade the client app on iOS simulator.`);\n      return false;\n    }\n\n    const answer = await prompt({\n      type: 'confirm',\n      name: 'upgradeSimulator',\n      message: 'Would you like to upgrade the Expo app in the iOS simulator?',\n      default: false,\n    });\n\n    log.newLine();\n    return answer.upgradeSimulator;\n  }\n\n  return false;\n}\n\nasync function maybeUpgradeSimulatorAsync() {\n  // Check if we can, and probably should, upgrade the (ios) simulator\n  if (Simulator.isPlatformSupported()) {\n    if (await shouldUpgradeSimulatorAsync()) {\n      const result = await Simulator.upgradeExpoAsync();\n      if (!result) {\n        log.error(\n          \"The upgrade of your simulator didn't go as planned. You might have to reinstall it manually with expo client:install:ios.\"\n        );\n      }\n    }\n  }\n}\n\nasync function shouldUpgradeEmulatorAsync(): Promise<boolean> {\n  // Check if we can, and probably should, upgrade the android client\n  if (Android.isPlatformSupported()) {\n    if (program.nonInteractive) {\n      log.warn(`Skipping attempt to upgrade the Expo app on the Android emulator.`);\n      return false;\n    }\n\n    const answer = await prompt({\n      type: 'confirm',\n      name: 'upgradeAndroid',\n      message: 'Would you like to upgrade the Expo app in the Android emulator?',\n      default: false,\n    });\n\n    log.newLine();\n    return answer.upgradeAndroid;\n  }\n\n  return false;\n}\n\nasync function maybeUpgradeEmulatorAsync() {\n  // Check if we can, and probably should, upgrade the android client\n  if (await shouldUpgradeEmulatorAsync()) {\n    const result = await Android.upgradeExpoAsync();\n    if (!result) {\n      log.error(\n        \"The upgrade of your Android client didn't go as planned. You might have to reinstall it manually with expo client:install:android.\"\n      );\n    }\n    log.newLine();\n  }\n}\n\nexport async function upgradeAsync(\n  {\n    requestedSdkVersion,\n    projectRoot,\n    workflow,\n  }: {\n    requestedSdkVersion: string | null;\n    projectRoot: string;\n    workflow: ExpoWorkflow;\n  },\n  options: Options\n) {\n  const { exp, pkg } = await ConfigUtils.getConfig(projectRoot);\n\n  if (await maybeBailOnGitStatusAsync()) return;\n\n  if (await maybeBailOnUnsafeFunctionalityAsync(exp)) return;\n\n  await stopExpoServerAsync(projectRoot);\n\n  const currentSdkVersionString = exp.sdkVersion!;\n  const sdkVersions = await Versions.releasedSdkVersionsAsync();\n  const latestSdkVersion = await Versions.newestReleasedSdkVersionAsync();\n  const latestSdkVersionString = latestSdkVersion.version;\n  let targetSdkVersionString =\n    maybeFormatSdkVersion(requestedSdkVersion) || latestSdkVersion.version;\n  let targetSdkVersion = sdkVersions[targetSdkVersionString];\n\n  // Maybe bail out early if people are trying to update to the current version\n  if (await shouldBailWhenUsingLatest(currentSdkVersionString, targetSdkVersionString)) return;\n\n  const platforms = exp.platforms || [];\n\n  if (\n    targetSdkVersionString === latestSdkVersionString &&\n    currentSdkVersionString !== targetSdkVersionString &&\n    !program.nonInteractive\n  ) {\n    const answer = await prompt({\n      type: 'confirm',\n      name: 'updateToLatestSdkVersion',\n      message: `You are currently using SDK ${currentSdkVersionString}. Would you like to update to the latest version, ${latestSdkVersion.version}?`,\n    });\n\n    log.newLine();\n\n    if (!answer.updateToLatestSdkVersion) {\n      const sdkVersionStringOptions = Object.keys(sdkVersions).filter(\n        v => semver.lte('33.0.0', v) && !Versions.gteSdkVersion(exp, v)\n      );\n\n      const { selectedSdkVersionString } = await prompt({\n        type: 'list',\n        name: 'selectedSdkVersionString',\n        message: 'Choose a SDK version to upgrade to:',\n        pageSize: 20,\n        choices: sdkVersionStringOptions.map(sdkVersionString => ({\n          value: sdkVersionString,\n          name: chalk.bold(sdkVersionString),\n        })),\n      });\n\n      // This has to exist because it's based on keys already present in sdkVersions\n      targetSdkVersion = sdkVersions[selectedSdkVersionString];\n      targetSdkVersionString = selectedSdkVersionString;\n      log.newLine();\n    }\n\n    // Check if we can, and probably should, upgrade the (ios) simulator\n    if (platforms.includes('ios')) {\n      await maybeUpgradeSimulatorAsync();\n    }\n\n    // Check if we can, and probably should, upgrade the android client\n    if (platforms.includes('android')) {\n      await maybeUpgradeEmulatorAsync();\n    }\n  } else if (!targetSdkVersion) {\n    if (program.nonInteractive) {\n      log.warn(\n        `You provided the target SDK version value of ${targetSdkVersionString} which does not seem to exist. Upgrading anyways because the command is running in nonInteractive mode.`\n      );\n    } else {\n      // If they provide an apparently unsupported sdk version then let people try\n      // anyways, maybe we want to use this for testing alpha versions or\n      // something...\n      const answer = await prompt({\n        type: 'confirm',\n        name: 'attemptUnknownUpdate',\n        message: `You provided the target SDK version value of ${targetSdkVersionString} which does not seem to exist. But hey, I'm just a program, what do I know. Do you want to try to upgrade to it anyways?`,\n      });\n\n      if (!answer.attemptUnknownUpdate) {\n        return;\n      }\n    }\n  }\n\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    log,\n    silent: getenv.boolish('EXPO_DEBUG', true),\n  });\n\n  log.addNewLineIfNone();\n  const expoPackageToInstall = `expo@^${targetSdkVersionString}`;\n  const installingPackageStep = logNewSection(`Installing the ${expoPackageToInstall} package...`);\n  log.addNewLineIfNone();\n  try {\n    await packageManager.addAsync(expoPackageToInstall);\n  } catch (e) {\n    installingPackageStep.fail(`Failed to install expo package with error: ${e.message}`);\n    throw e;\n  }\n  installingPackageStep.succeed(`Installed ${expoPackageToInstall}`);\n\n  // Evaluate project config (app.config.js)\n  const { exp: currentExp, dynamicConfigPath } = ConfigUtils.getConfig(projectRoot);\n\n  const removingSdkVersionStep = logNewSection('Validating configuration.');\n  if (dynamicConfigPath) {\n    if (\n      !Versions.gteSdkVersion(currentExp, targetSdkVersionString) &&\n      currentExp.sdkVersion !== 'UNVERSIONED'\n    ) {\n      log.addNewLineIfNone();\n      removingSdkVersionStep.warn(\n        'Please manually delete the sdkVersion field in your project app.config file. It is now automatically determined based on the expo package version in your package.json.'\n      );\n    } else {\n      removingSdkVersionStep.succeed('Validated configuration.');\n    }\n  } else {\n    try {\n      const { rootConfig } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n      if (rootConfig.expo.sdkVersion && rootConfig.expo.sdkVersion !== 'UNVERSIONED') {\n        log.addNewLineIfNone();\n        await ConfigUtils.writeConfigJsonAsync(projectRoot, { sdkVersion: undefined });\n        removingSdkVersionStep.succeed('Removed deprecated sdkVersion field from app.json.');\n      } else {\n        removingSdkVersionStep.succeed('Validated configuration.');\n      }\n    } catch (_) {\n      removingSdkVersionStep.fail('Unable to validate configuration.');\n    }\n  }\n\n  await makeBreakingChangesToConfigAsync(projectRoot, targetSdkVersionString);\n\n  const updatingPackagesStep = logNewSection(\n    'Updating packages to compatible versions (where known).'\n  );\n\n  log.addNewLineIfNone();\n\n  // Get all updated packages\n  const updates = await getUpdatedDependenciesAsync(projectRoot, workflow, targetSdkVersion);\n\n  // Split updated packages by dependencies and devDependencies\n  const devDependencies = pickBy(updates, (_version, name) => pkg.devDependencies?.[name]);\n  const devDependenciesAsStringArray = Object.keys(devDependencies).map(\n    name => `${name}@${updates[name]}`\n  );\n  const dependencies = pickBy(updates, (_version, name) => pkg.dependencies?.[name]);\n  const dependenciesAsStringArray = Object.keys(dependencies).map(\n    name => `${name}@${updates[name]}`\n  );\n\n  // Install dev dependencies\n  if (devDependenciesAsStringArray.length) {\n    try {\n      await packageManager.addDevAsync(...devDependenciesAsStringArray);\n    } catch (e) {\n      updatingPackagesStep.fail(\n        `Failed to upgrade JavaScript devDependencies: ${devDependenciesAsStringArray.join(' ')}`\n      );\n    }\n  }\n\n  // Install dependencies\n  if (dependenciesAsStringArray.length) {\n    try {\n      await packageManager.addAsync(...dependenciesAsStringArray);\n    } catch (e) {\n      updatingPackagesStep.fail(\n        `Failed to upgrade JavaScript dependencies: ${dependenciesAsStringArray.join(' ')}`\n      );\n    }\n  }\n\n  updatingPackagesStep.succeed('Updated known packages to compatible versions.');\n\n  // Remove package-lock.json and node_modules if using npm instead of yarn. See the function\n  // for more information on why.\n  await maybeCleanNpmStateAsync(packageManager);\n\n  const clearingCacheStep = logNewSection('Clearing the packager cache.');\n  try {\n    await Project.startReactNativeServerAsync(projectRoot, { reset: true, nonPersistent: true });\n  } catch (e) {\n    clearingCacheStep.fail(`Failed to clear packager cache with error: ${e.message}`);\n  } finally {\n    try {\n      // Ensure that we at least attempt to stop the server even if it failed to clear the cache\n      // It was pointed out to me that \"Connecting to Metro bundler failed.\" could occur which would lead\n      // to the upgrade command not exiting upon completion because, I believe, the server remained open.\n      await Project.stopReactNativeServerAsync(projectRoot);\n    } catch {}\n\n    clearingCacheStep.succeed('Cleared packager cache.');\n  }\n\n  log.newLine();\n  log(chalk.bold.green(`👏 Automated upgrade steps complete.`));\n  log(chalk.bold.grey(`...but this doesn't mean everything is done yet!`));\n  log.newLine();\n\n  // List packages that were updated\n  log(chalk.bold(`✅ The following packages were updated:`));\n  log(chalk.grey.bold([...Object.keys(updates), ...['expo']].join(', ')));\n  log.addNewLineIfNone();\n\n  // List packages that were not updated\n  const allDependencies = { ...pkg.dependencies, ...pkg.devDependencies };\n  const untouchedDependencies = difference(Object.keys(allDependencies), [\n    ...Object.keys(updates),\n    'expo',\n  ]);\n  if (untouchedDependencies.length) {\n    log.addNewLineIfNone();\n    log(\n      chalk.bold(\n        `🚨 The following packages were ${chalk.underline(\n          'not'\n        )} updated. You should check the READMEs for those repositories to determine what version is compatible with your new set of packages:`\n      )\n    );\n    log(chalk.grey.bold(untouchedDependencies.join(', ')));\n    log.addNewLineIfNone();\n  }\n\n  // Add some basic additional instructions for bare workflow\n  if (workflow === 'bare') {\n    log.addNewLineIfNone();\n    log(\n      chalk.bold(\n        `It will be necessary to re-build your native projects to compile the updated dependencies. You will need to run ${chalk.grey(\n          'pod install'\n        )} in your ios directory before re-building the iOS project.`\n      )\n    );\n    log.addNewLineIfNone();\n  }\n\n  if (targetSdkVersion && targetSdkVersion.releaseNoteUrl) {\n    log(\n      `Please refer to the release notes for information on any further required steps to update and information about breaking changes:`\n    );\n    log(chalk.bold(targetSdkVersion.releaseNoteUrl));\n  } else {\n    log.gray(\n      `Unable to find release notes for ${targetSdkVersionString}, please try to find them on https://blog.expo.io to learn more about other potentially important upgrade steps and breaking changes.`\n    );\n  }\n\n  const skippedSdkVersions = pickBy(sdkVersions, (_data, sdkVersionString) => {\n    return (\n      semver.lt(sdkVersionString, targetSdkVersionString) &&\n      semver.gt(sdkVersionString, currentSdkVersionString)\n    );\n  });\n\n  const skippedSdkVersionKeys = Object.keys(skippedSdkVersions);\n  if (skippedSdkVersionKeys.length) {\n    log.newLine();\n\n    const releaseNotesUrls = Object.values(skippedSdkVersions)\n      .map(data => data.releaseNoteUrl)\n      .filter(releaseNoteUrl => releaseNoteUrl)\n      .reverse();\n    if (releaseNotesUrls.length === 1) {\n      log(`You should also look at the breaking changes from a release that you skipped:`);\n      log(chalk.bold(`- ${releaseNotesUrls[0]}`));\n    } else {\n      log(\n        `In addition to the most recent release notes, you should go over the breaking changes from skipped releases:`\n      );\n      releaseNotesUrls.forEach(url => {\n        log(chalk.bold(`- ${url}`));\n      });\n    }\n  }\n}\n\nasync function maybeCleanNpmStateAsync(packageManager: any) {\n  // We don't trust npm to properly handle deduping dependencies so we need to\n  // clear the lockfile and node_modules.\n  // https://forums.expo.io/t/sdk-37-unrecognized-font-family/35201\n  // https://twitter.com/geoffreynyaga/status/1246170581109743617\n  if (packageManager instanceof PackageManager.NpmPackageManager) {\n    const cleaningNpmStateStep = logNewSection(\n      'Removing package-lock.json and deleting node_modules.'\n    );\n\n    let shouldInstallNodeModules = true;\n    try {\n      await packageManager.removeLockfileAsync();\n      await packageManager.cleanAsync();\n      cleaningNpmStateStep.succeed('Removed package-lock.json and deleted node_modules.');\n    } catch {\n      shouldInstallNodeModules = false;\n      cleaningNpmStateStep.fail(\n        'Unable to remove package-lock.json and delete node_modules. We recommend doing this to ensure that the upgrade goes smoothly when using npm instead of yarn.'\n      );\n    }\n\n    if (shouldInstallNodeModules) {\n      const reinstallingNodeModulesStep = logNewSection(\n        'Installing node_modules and rebuilding package-lock.json.'\n      );\n      try {\n        await packageManager.installAsync();\n        reinstallingNodeModulesStep.succeed(\n          'Installed node_modules and rebuilt package-lock.json.'\n        );\n      } catch {\n        reinstallingNodeModulesStep.fail(\n          'Running npm install failed. Please check npm-error.log for more information.'\n        );\n      }\n    }\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('upgrade [targetSdkVersion]')\n    .alias('update')\n    .option('--npm', 'Use npm to install dependencies. (default when package-lock.json exists)')\n    .option('--yarn', 'Use Yarn to install dependencies. (default when yarn.lock exists)')\n    .description('Upgrades your project dependencies and app.json and to the given SDK version')\n    .asyncAction(async (requestedSdkVersion: string | null, options: Options) => {\n      const { projectRoot, workflow } = await findProjectRootAsync(process.cwd());\n\n      await upgradeAsync(\n        {\n          requestedSdkVersion,\n          projectRoot,\n          workflow,\n        },\n        options\n      );\n    });\n}\n"],"file":"upgrade.js"}