{"version":3,"sources":["../../../../../src/commands/eas-build/build/builders/iOSBuilder.ts"],"names":["iOSBuilder","constructor","ctx","eas","builds","ios","Error","buildProfile","prepareJobAsync","archiveUrl","workflow","Workflow","Generic","prepareGenericJobAsync","Managed","prepareManagedJobAsync","ensureCredentialsAsync","shouldLoadCredentials","bundleIdentifier","exp","provider","iOSCredentialsProvider","projectDir","projectName","accountName","initAsync","credentialsSource","nonInteractive","credentials","getCredentialsAsync","configureProjectAsync","getBundleIdentifier","spinner","profileName","ProvisioningProfileUtils","readProfileName","provisioningProfile","appleTeam","readAppleTeam","IOSConfig","BundleIdenitifer","setBundleIdentifierForPbxproj","ProvisioningProfile","setProvisioningProfileForPbxproj","appleTeamId","teamId","gitUtils","ensureGitStatusIsCleanAsync","succeed","err","DirtyGitTreeError","log","newLine","showDiff","confirm","type","name","message","commitChangesAsync","fail","prepareJobCommonAsync","secrets","provisioningProfileBase64","distributionCertificate","dataBase64","certP12","password","certPassword","platform","Platform","iOS","projectUrl","BuildType","packageJson","example","manifest","buildType","_getBundleIdentifier","bundleIdentifierFromPbxproj","getBundleIdentifierFromPbxproj","bundleIdentifierFromConfig","chalk","yellow","choices","title","bold","value"],"mappings":"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","sourcesContent":["import { BuildType, Job, Platform, iOS, sanitizeJob } from '@expo/build-tools';\nimport { IOSConfig } from '@expo/config';\nimport once from 'lodash/once';\nimport ora from 'ora';\n\nimport iOSCredentialsProvider, {\n  iOSCredentials,\n} from '../../../../credentials/provider/iOSCredentialsProvider';\nimport * as ProvisioningProfileUtils from '../../../../credentials/utils/provisioningProfile';\nimport {\n  Workflow,\n  iOSBuildProfile,\n  iOSGenericBuildProfile,\n  iOSManagedBuildProfile,\n} from '../../../../easJson';\nimport log from '../../../../log';\nimport prompts from '../../../../prompts';\nimport { ensureCredentialsAsync } from '../credentials';\nimport { Builder, BuilderContext } from '../types';\nimport * as gitUtils from '../utils/git';\n\ninterface CommonJobProperties {\n  platform: Platform.iOS;\n  projectUrl: string;\n  secrets?: {\n    provisioningProfileBase64: string;\n    distributionCertificate: {\n      dataBase64: string;\n      password: string;\n    };\n  };\n}\n\nclass iOSBuilder implements Builder {\n  private credentials?: iOSCredentials;\n  private buildProfile: iOSBuildProfile;\n\n  constructor(public readonly ctx: BuilderContext) {\n    if (!ctx.eas.builds.ios) {\n      throw new Error(\"missing ios configuration, shouldn't happen\");\n    }\n    this.buildProfile = ctx.eas.builds.ios;\n  }\n\n  public async prepareJobAsync(archiveUrl: string): Promise<Job> {\n    if (this.buildProfile.workflow === Workflow.Generic) {\n      return sanitizeJob(await this.prepareGenericJobAsync(archiveUrl, this.buildProfile));\n    } else if (this.buildProfile.workflow === Workflow.Managed) {\n      return sanitizeJob(await this.prepareManagedJobAsync(archiveUrl, this.buildProfile));\n    } else {\n      throw new Error(\"Unknown workflow. Shouldn't happen\");\n    }\n  }\n\n  public async ensureCredentialsAsync(): Promise<void> {\n    if (!this.shouldLoadCredentials()) {\n      return;\n    }\n    const bundleIdentifier = this.ctx.exp?.ios?.bundleIdentifier;\n    if (!bundleIdentifier) {\n      throw new Error('\"expo.ios.bundleIdentifier\" field is required in your app.json');\n    }\n    const provider = new iOSCredentialsProvider(this.ctx.projectDir, {\n      projectName: this.ctx.projectName,\n      accountName: this.ctx.accountName,\n      bundleIdentifier,\n    });\n    await provider.initAsync();\n    const credentialsSource = await ensureCredentialsAsync(\n      provider,\n      this.buildProfile.workflow,\n      this.buildProfile.credentialsSource,\n      this.ctx.nonInteractive\n    );\n    this.credentials = await provider.getCredentialsAsync(credentialsSource);\n  }\n\n  public async configureProjectAsync(): Promise<void> {\n    // TODO: add simulator flow\n    // assuming we're building for app store\n    if (!this.credentials) {\n      throw new Error('Call ensureCredentialsAsync first!');\n    }\n    const bundleIdentifier = await getBundleIdentifier(this.ctx);\n\n    const spinner = ora('Making sure your iOS project is set up properly');\n\n    const profileName = ProvisioningProfileUtils.readProfileName(\n      this.credentials.provisioningProfile\n    );\n    const appleTeam = ProvisioningProfileUtils.readAppleTeam(this.credentials.provisioningProfile);\n\n    const { projectDir } = this.ctx;\n    IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectDir, bundleIdentifier, false);\n    IOSConfig.ProvisioningProfile.setProvisioningProfileForPbxproj(projectDir, {\n      profileName,\n      appleTeamId: appleTeam.teamId,\n    });\n\n    try {\n      await gitUtils.ensureGitStatusIsCleanAsync();\n      spinner.succeed();\n    } catch (err) {\n      if (err instanceof gitUtils.DirtyGitTreeError) {\n        spinner.succeed('We configured your iOS project to build it on the Expo servers');\n        log.newLine();\n        log('Please review the following changes and pass the message to make the commit.');\n        log.newLine();\n        await gitUtils.showDiff();\n        log.newLine();\n        const { confirm } = await prompts({\n          type: 'confirm',\n          name: 'confirm',\n          message: 'Can we commit these changes for you?',\n        });\n        if (confirm) {\n          await gitUtils.commitChangesAsync();\n          log.newLine();\n          log('✅ Successfully commited the configuration changes.');\n        } else {\n          throw new Error(\n            \"Aborting, run the build command once you're ready. Make sure to commit any changes you've made.\"\n          );\n        }\n      } else {\n        spinner.fail();\n        throw err;\n      }\n    }\n  }\n\n  private async prepareJobCommonAsync(archiveUrl: string): Promise<Partial<CommonJobProperties>> {\n    const secrets = this.credentials\n      ? {\n          secrets: {\n            provisioningProfileBase64: this.credentials.provisioningProfile,\n            distributionCertificate: {\n              dataBase64: this.credentials.distributionCertificate.certP12,\n              password: this.credentials.distributionCertificate.certPassword,\n            },\n          },\n        }\n      : {};\n\n    return {\n      platform: Platform.iOS,\n      projectUrl: archiveUrl,\n      ...secrets,\n    };\n  }\n\n  private async prepareGenericJobAsync(\n    archiveUrl: string,\n    buildProfile: iOSGenericBuildProfile\n  ): Promise<Partial<iOS.GenericJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Generic,\n    };\n  }\n\n  private async prepareManagedJobAsync(\n    archiveUrl: string,\n    buildProfile: iOSManagedBuildProfile\n  ): Promise<Partial<iOS.ManagedJob>> {\n    return {\n      ...(await this.prepareJobCommonAsync(archiveUrl)),\n      type: BuildType.Managed,\n      packageJson: { example: 'packageJson' },\n      manifest: { example: 'manifest' },\n    };\n  }\n\n  private shouldLoadCredentials(): boolean {\n    return (\n      (this.buildProfile.workflow === Workflow.Managed &&\n        this.buildProfile.buildType !== 'simulator') ||\n      this.buildProfile.workflow === Workflow.Generic\n    );\n  }\n}\nconst getBundleIdentifier = once(_getBundleIdentifier);\n\nasync function _getBundleIdentifier(ctx: BuilderContext): Promise<string> {\n  const bundleIdentifierFromPbxproj = IOSConfig.BundleIdenitifer.getBundleIdentifierFromPbxproj(\n    ctx.projectDir\n  );\n  const bundleIdentifierFromConfig = IOSConfig.BundleIdenitifer.getBundleIdentifier(ctx.exp);\n  if (bundleIdentifierFromPbxproj !== null && bundleIdentifierFromConfig !== null) {\n    if (bundleIdentifierFromPbxproj === bundleIdentifierFromConfig) {\n      return bundleIdentifierFromPbxproj;\n    } else {\n      log.newLine();\n      log(\n        log.chalk.yellow(\n          `We detected that your Xcode project is configured with a different bundle identifier than the one defined in app.json/app.config.js.\nIf you choose the one defined in app.json/app.config.js we'll automatically configure your Xcode project with it.\nHowever, if you choose the one defined in the Xcode project you'll have to update app.json/app.config.js on your own.\nOtherwise, you'll see this prompt again in the future.`\n        )\n      );\n      log.newLine();\n      const { bundleIdentifier } = await prompts({\n        type: 'select',\n        name: 'bundleIdentifier',\n        message: 'Which bundle identifier should we use?',\n        choices: [\n          {\n            title: `Defined in the Xcode project: ${log.chalk.bold(bundleIdentifierFromPbxproj)}`,\n            value: bundleIdentifierFromPbxproj,\n          },\n          {\n            title: `Defined in app.json/app.config.js: ${log.chalk.bold(\n              bundleIdentifierFromConfig\n            )}`,\n            value: bundleIdentifierFromConfig,\n          },\n        ],\n      });\n      return bundleIdentifier;\n    }\n  } else if (bundleIdentifierFromPbxproj === null && bundleIdentifierFromConfig === null) {\n    throw new Error('Please define \"expo.ios.bundleIdentifier\" in app.json/app.config.js');\n  } else {\n    if (bundleIdentifierFromPbxproj !== null) {\n      log(\n        `Using ${log.chalk.bold(\n          bundleIdentifierFromPbxproj\n        )} as the bundle identifier (read from the Xcode project).`\n      );\n      return bundleIdentifierFromPbxproj;\n    } else {\n      // bundleIdentifierFromConfig is never null in this case\n      // the following line is to satisfy TS\n      const bundleIdentifier = bundleIdentifierFromConfig ?? '';\n      log(\n        `Using ${log.chalk.bold(\n          bundleIdentifier\n        )} as the bundle identifier (read from app.json/app.config.js).\nWe'll automatically configure your Xcode project using this value.`\n      );\n      return bundleIdentifier;\n    }\n  }\n}\n\nexport default iOSBuilder;\n"],"file":"iOSBuilder.js"}