"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _buildTools() {
  const data = require("@expo/build-tools");

  _buildTools = function () {
    return data;
  };

  return data;
}

function _AndroidCredentialsProvider() {
  const data = _interopRequireDefault(require("../../../../credentials/provider/AndroidCredentialsProvider"));

  _AndroidCredentialsProvider = function () {
    return data;
  };

  return data;
}

function _easJson() {
  const data = require("../../../../easJson");

  _easJson = function () {
    return data;
  };

  return data;
}

function _credentials() {
  const data = require("../credentials");

  _credentials = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AndroidBuilder {
  constructor(ctx) {
    this.ctx = ctx;

    _defineProperty(this, "credentials", void 0);

    _defineProperty(this, "buildProfile", void 0);

    _defineProperty(this, "credentialsPrepared", false);

    if (!ctx.eas.builds.android) {
      throw new Error("missing android configuration, shouldn't happen");
    }

    this.buildProfile = ctx.eas.builds.android;
  }

  async ensureCredentialsAsync() {
    this.credentialsPrepared = true;

    if (!this.shouldLoadCredentials()) {
      return;
    }

    const provider = new (_AndroidCredentialsProvider().default)(this.ctx.projectDir, {
      projectName: this.ctx.projectName,
      accountName: this.ctx.accountName
    });
    await provider.initAsync();
    const credentialsSource = await (0, _credentials().ensureCredentialsAsync)(provider, this.buildProfile.workflow, this.buildProfile.credentialsSource, this.ctx.nonInteractive);
    this.credentials = await provider.getCredentialsAsync(credentialsSource);
  }

  async configureProjectAsync() {// TODO: implement me
  }

  async prepareJobAsync(archiveUrl) {
    if (!this.credentialsPrepared) {
      throw new Error('ensureCredentialsAsync should be called before prepareJobAsync');
    }

    if (this.buildProfile.workflow === _easJson().Workflow.Generic) {
      return (0, _buildTools().sanitizeJob)((await this.prepareGenericJobAsync(archiveUrl, this.buildProfile)));
    } else if (this.buildProfile.workflow === _easJson().Workflow.Managed) {
      return (0, _buildTools().sanitizeJob)((await this.prepareManagedJobAsync(archiveUrl, this.buildProfile)));
    } else {
      throw new Error("Unknown workflow. Shouldn't happen");
    }
  }

  async prepareJobCommonAsync(archiveUrl) {
    const secrets = this.credentials ? {
      secrets: {
        keystore: {
          dataBase64: this.credentials.keystore.keystore,
          keystorePassword: this.credentials.keystore.keystorePassword,
          keyAlias: this.credentials.keystore.keyAlias,
          keyPassword: this.credentials.keystore.keyPassword
        }
      }
    } : {};
    return {
      platform: _buildTools().Platform.Android,
      projectUrl: archiveUrl,
      ...secrets
    };
  }

  async prepareGenericJobAsync(archiveUrl, buildProfile) {
    return { ...(await this.prepareJobCommonAsync(archiveUrl)),
      type: _buildTools().BuildType.Generic,
      gradleCommand: buildProfile.buildCommand,
      artifactPath: buildProfile.artifactPath
    };
  }

  async prepareManagedJobAsync(archiveUrl, buildProfile) {
    return { ...(await this.prepareJobCommonAsync(archiveUrl)),
      type: _buildTools().BuildType.Managed,
      packageJson: {
        example: 'packageJson'
      },
      manifest: {
        example: 'manifest'
      }
    };
  }

  shouldLoadCredentials() {
    return this.buildProfile.workflow === _easJson().Workflow.Managed || this.buildProfile.workflow === _easJson().Workflow.Generic && !this.buildProfile.withoutCredentials;
  }

}

var _default = AndroidBuilder;
exports.default = _default;
//# sourceMappingURL=AndroidBuilder.js.map