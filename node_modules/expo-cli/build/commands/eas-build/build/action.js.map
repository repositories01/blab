{"version":3,"sources":["../../../../src/commands/eas-build/build/action.ts"],"names":["buildAction","projectDir","options","platforms","Object","values","BuildCommandPlatform","platform","profile","includes","Error","map","p","log","chalk","bold","join","easConfig","EasJsonReader","readAsync","ctx","createBuilderContextAsync","parent","nonInteractive","projectId","user","accountName","projectName","scheduledBuilds","startBuildsAsync","wait","builds","waitForBuildEndAsync","i","buildId","eas","UserManager","ensureLoggedInAsync","exp","owner","username","slug","client","ApiV2","clientForUser","ANDROID","ALL","builder","AndroidBuilder","startBuildAsync","push","IOS","iOSBuilder","tarPath","path","os","tmpdir","ensureCredentialsAsync","configureProjectAsync","fileSize","archiveUrl","UploadType","TURTLE_PROJECT_SOURCES","job","prepareJobAsync","postAsync","fs","remove","buildIds","timeoutSec","intervalSec","spinner","start","time","Date","getTime","endTime","Promise","all","getAsync","err","length","status","BuildStatus","FINISHED","succeed","IN_QUEUE","text","IN_PROGRESS","ERRORED","fail","warn","filter","build","inQueue","inProgress","errored","finished","unknownState","red","green"],"mappings":"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","sourcesContent":["import { getConfig } from '@expo/config';\nimport { ApiV2, User, UserManager } from '@expo/xdl';\nimport chalk from 'chalk';\nimport delayAsync from 'delay-async';\nimport fs from 'fs-extra';\nimport ora from 'ora';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { EasConfig, EasJsonReader } from '../../../easJson';\nimport log from '../../../log';\nimport { ensureProjectExistsAsync } from '../../../projects';\nimport { UploadType, uploadAsync } from '../../../uploads';\nimport { createProgressTracker } from '../../utils/progress';\nimport { Build, BuildCommandPlatform, BuildStatus } from '../types';\nimport AndroidBuilder from './builders/AndroidBuilder';\nimport iOSBuilder from './builders/iOSBuilder';\nimport { Builder, BuilderContext } from './types';\nimport { ensureGitStatusIsCleanAsync, makeProjectTarballAsync } from './utils/git';\nimport { printBuildResults, printLogsUrls } from './utils/misc';\n\ninterface BuildOptions {\n  platform: BuildCommandPlatform;\n  skipCredentialsCheck?: boolean; // TODO: noop for now\n  wait?: boolean;\n  profile: string;\n  parent?: {\n    nonInteractive: boolean;\n  };\n}\n\nasync function buildAction(projectDir: string, options: BuildOptions): Promise<void> {\n  const platforms = Object.values(BuildCommandPlatform);\n\n  const { platform, profile } = options;\n  if (!platform || !platforms.includes(platform)) {\n    throw new Error(\n      `-p/--platform is required, valid platforms: ${platforms\n        .map(p => log.chalk.bold(p))\n        .join(', ')}`\n    );\n  }\n\n  await ensureGitStatusIsCleanAsync();\n\n  const easConfig: EasConfig = await new EasJsonReader(projectDir, platform).readAsync(profile);\n  const ctx = await createBuilderContextAsync(\n    projectDir,\n    easConfig,\n    options.parent?.nonInteractive\n  );\n  const projectId = await ensureProjectExistsAsync(ctx.user, {\n    accountName: ctx.accountName,\n    projectName: ctx.projectName,\n  });\n  const scheduledBuilds = await startBuildsAsync(ctx, projectId, options.platform);\n  printLogsUrls(ctx.accountName, scheduledBuilds);\n\n  if (options.wait) {\n    const builds = await waitForBuildEndAsync(\n      ctx,\n      projectId,\n      scheduledBuilds.map(i => i.buildId)\n    );\n    printBuildResults(builds);\n  }\n}\n\nasync function createBuilderContextAsync(\n  projectDir: string,\n  eas: EasConfig,\n  nonInteractive: boolean = false\n): Promise<BuilderContext> {\n  const user: User = await UserManager.ensureLoggedInAsync();\n  const { exp } = getConfig(projectDir);\n  const accountName = exp.owner || user.username;\n  const projectName = exp.slug;\n\n  return {\n    eas,\n    projectDir,\n    user,\n    accountName,\n    projectName,\n    exp,\n    nonInteractive,\n  };\n}\n\nasync function startBuildsAsync(\n  ctx: BuilderContext,\n  projectId: string,\n  platform: BuildOptions['platform']\n): Promise<\n  { platform: BuildCommandPlatform.ANDROID | BuildCommandPlatform.IOS; buildId: string }[]\n> {\n  const client = ApiV2.clientForUser(ctx.user);\n  const scheduledBuilds: {\n    platform: BuildCommandPlatform.ANDROID | BuildCommandPlatform.IOS;\n    buildId: string;\n  }[] = [];\n  if ([BuildCommandPlatform.ANDROID, BuildCommandPlatform.ALL].includes(platform)) {\n    const builder = new AndroidBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: BuildCommandPlatform.ANDROID, buildId });\n  }\n  if ([BuildCommandPlatform.IOS, BuildCommandPlatform.ALL].includes(platform)) {\n    const builder = new iOSBuilder(ctx);\n    const buildId = await startBuildAsync(client, builder, projectId);\n    scheduledBuilds.push({ platform: BuildCommandPlatform.IOS, buildId });\n  }\n  return scheduledBuilds;\n}\n\nasync function startBuildAsync(\n  client: ApiV2,\n  builder: Builder,\n  projectId: string\n): Promise<string> {\n  const tarPath = path.join(os.tmpdir(), `${uuidv4()}.tar.gz`);\n  try {\n    await builder.ensureCredentialsAsync();\n    await builder.configureProjectAsync();\n\n    const fileSize = await makeProjectTarballAsync(tarPath);\n\n    log('Uploading project to AWS S3');\n    const archiveUrl = await uploadAsync(\n      UploadType.TURTLE_PROJECT_SOURCES,\n      tarPath,\n      createProgressTracker(fileSize)\n    );\n\n    const job = await builder.prepareJobAsync(archiveUrl);\n    log('Starting build');\n    const { buildId } = await client.postAsync(`projects/${projectId}/builds`, {\n      job: job as any,\n    });\n    return buildId;\n  } finally {\n    await fs.remove(tarPath);\n  }\n}\n\nasync function waitForBuildEndAsync(\n  ctx: BuilderContext,\n  projectId: string,\n  buildIds: string[],\n  { timeoutSec = 1800, intervalSec = 30 } = {}\n): Promise<(Build | null)[]> {\n  const client = ApiV2.clientForUser(ctx.user);\n  log('Waiting for build to complete. You can press Ctrl+C to exit.');\n  const spinner = ora().start();\n  let time = new Date().getTime();\n  const endTime = time + timeoutSec * 1000;\n  while (time <= endTime) {\n    const builds: (Build | null)[] = await Promise.all(\n      buildIds.map(buildId => {\n        try {\n          return client.getAsync(`projects/${projectId}/builds/${buildId}`);\n        } catch (err) {\n          return null;\n        }\n      })\n    );\n    if (builds.length === 1) {\n      switch (builds[0]?.status) {\n        case BuildStatus.FINISHED:\n          spinner.succeed('Build finished.');\n          return builds;\n        case BuildStatus.IN_QUEUE:\n          spinner.text = 'Build queued...';\n          break;\n        case BuildStatus.IN_PROGRESS:\n          spinner.text = 'Build in progress...';\n          break;\n        case BuildStatus.ERRORED:\n          spinner.fail('Build failed.');\n          throw new Error(`Standalone build failed!`);\n        default:\n          spinner.warn('Unknown status.');\n          throw new Error(`Unknown status: ${builds} - aborting!`);\n      }\n    } else {\n      if (builds.filter(build => build?.status === BuildStatus.FINISHED).length === builds.length) {\n        spinner.succeed('All build have finished.');\n        return builds;\n      } else if (\n        builds.filter(build =>\n          build?.status ? [BuildStatus.FINISHED, BuildStatus.ERRORED].includes(build.status) : false\n        ).length === builds.length\n      ) {\n        spinner.fail('Some of the builds failed.');\n        return builds;\n      } else {\n        const inQueue = builds.filter(build => build?.status === BuildStatus.IN_QUEUE).length;\n        const inProgress = builds.filter(build => build?.status === BuildStatus.IN_PROGRESS).length;\n        const errored = builds.filter(build => build?.status === BuildStatus.ERRORED).length;\n        const finished = builds.filter(build => build?.status === BuildStatus.FINISHED).length;\n        const unknownState = builds.length - inQueue - inProgress - errored - finished;\n        spinner.text = [\n          inQueue && `Builds in queue: ${inQueue}`,\n          inProgress && `Builds in progress: ${inProgress}`,\n          errored && chalk.red(`Builds failed: ${errored}`),\n          finished && chalk.green(`Builds finished: ${finished}`),\n          unknownState && chalk.red(`Builds in unknown state: ${unknownState}`),\n        ]\n          .filter(i => i)\n          .join('\\t');\n      }\n    }\n    time = new Date().getTime();\n    await delayAsync(intervalSec * 1000);\n  }\n  spinner.warn('Timed out.');\n  throw new Error(\n    'Timeout reached! It is taking longer than expected to finish the build, aborting...'\n  );\n}\n\nexport default buildAction;\n"],"file":"action.js"}