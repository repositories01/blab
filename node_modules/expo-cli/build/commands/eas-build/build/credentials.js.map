{"version":3,"sources":["../../../../src/commands/eas-build/build/credentials.ts"],"names":["platformMapName","ios","android","ensureCredentialsAutoAsync","provider","workflow","nonInteractive","platform","Workflow","Managed","hasLocalAsync","CredentialsSource","LOCAL","REMOTE","Generic","hasLocal","hasRemote","hasRemoteAsync","isLocalSyncedAsync","CommandError","select","type","name","message","choices","title","value","log","warn","confirm","Error","ensureCredentialsAsync","src","AUTO"],"mappings":"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","sourcesContent":["import CommandError from '../../../CommandError';\nimport { CredentialsProvider } from '../../../credentials/provider';\nimport { CredentialsSource, Workflow } from '../../../easJson';\nimport log from '../../../log';\nimport prompts from '../../../prompts';\n\nconst platformMapName = {\n  ios: 'iOS',\n  android: 'Android',\n};\n\nasync function ensureCredentialsAutoAsync(\n  provider: CredentialsProvider,\n  workflow: Workflow,\n  nonInteractive: boolean\n): Promise<CredentialsSource.LOCAL | CredentialsSource.REMOTE> {\n  const platform = platformMapName[provider.platform];\n  switch (workflow) {\n    case Workflow.Managed:\n      if (await provider.hasLocalAsync()) {\n        return CredentialsSource.LOCAL;\n      } else {\n        return CredentialsSource.REMOTE;\n      }\n    case Workflow.Generic: {\n      const hasLocal = await provider.hasLocalAsync();\n      const hasRemote = await provider.hasRemoteAsync();\n      if (hasRemote && hasLocal) {\n        if (!(await provider.isLocalSyncedAsync())) {\n          if (nonInteractive) {\n            throw new CommandError(\n              'NON_INTERACTIVE',\n              `Contents of your local credentials.json for ${platform} are not the same as credentials on Expo servers. To use the desired credentials, set the \"builds.${platform}.{profile}.credentialsSource\" field in the credentials.json file to one of the following: \"local\", \"remote\".`\n            );\n          } else {\n            log(\n              `Contents of your local credentials.json for ${platform} are not the same as credentials on Expo servers`\n            );\n          }\n\n          const { select } = await prompts({\n            type: 'select',\n            name: 'select',\n            message: 'Which credentials you want to use for this build?',\n            choices: [\n              { title: 'Local credentials.json', value: CredentialsSource.LOCAL },\n              { title: 'Credentials stored on Expo servers.', value: CredentialsSource.REMOTE },\n            ],\n          });\n          return select;\n        } else {\n          return CredentialsSource.LOCAL;\n        }\n      } else if (hasLocal) {\n        return CredentialsSource.LOCAL;\n      } else if (hasRemote) {\n        return CredentialsSource.REMOTE;\n      } else {\n        if (nonInteractive) {\n          throw new CommandError(\n            'NON_INTERACTIVE',\n            `Credentials for this app are not configured and there is no entry in credentials.json for ${platform}. Either configure credentials.json, or launch the build without \"--non-interactive\" flag to get a prompt to generate credentials automatically.`\n          );\n        } else {\n          log.warn(\n            `Credentials for this app are not configured and there is no entry in credentials.json for ${platform}`\n          );\n        }\n\n        const { confirm } = await prompts({\n          type: 'confirm',\n          name: 'confirm',\n          message: 'Do you want to generate new credentials?',\n        });\n        if (confirm) {\n          return CredentialsSource.REMOTE;\n        } else {\n          throw new Error(`Aborting build process, credentials are not configured for ${platform}`);\n        }\n      }\n    }\n  }\n}\n\nexport async function ensureCredentialsAsync(\n  provider: CredentialsProvider,\n  workflow: Workflow,\n  src: CredentialsSource,\n  nonInteractive: boolean\n): Promise<CredentialsSource.LOCAL | CredentialsSource.REMOTE> {\n  switch (src) {\n    case CredentialsSource.LOCAL:\n      return CredentialsSource.LOCAL;\n    case CredentialsSource.REMOTE:\n      return CredentialsSource.REMOTE;\n    case CredentialsSource.AUTO:\n      return await ensureCredentialsAutoAsync(provider, workflow, nonInteractive);\n  }\n}\n"],"file":"credentials.js"}