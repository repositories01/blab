{"version":3,"sources":["../../../../../src/commands/eas-build/build/utils/misc.ts"],"names":["printLogsUrls","accountName","builds","user","UserManager","ensureLoggedInAsync","length","buildId","logsUrl","UrlUtils","constructBuildLogsUrl","username","v2","forEach","platform","printBuildResults","artifacts","buildUrl","filter","build","status"],"mappings":";;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAGA,eAAeA,aAAf,CACEC,WADF,EAEEC,MAFF,EAGiB;AACf,QAAMC,IAAI,GAAG,MAAMC,mBAAYC,mBAAZ,EAAnB;;AACA,MAAIH,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAM;AAAEC,MAAAA;AAAF,QAAcL,MAAM,CAAC,CAAD,CAA1B;AACA,UAAMM,OAAO,GAAGC,QAAQ,GAACC,qBAAT,CAA+B;AAC7CH,MAAAA,OAD6C;AAE7CI,MAAAA,QAAQ,EAAEV,WAFmC;AAG7CW,MAAAA,EAAE,EAAE;AAHyC,KAA/B,CAAhB;AAKA,wBAAK,aAAYJ,OAAQ,EAAzB;AACD,GARD,MAQO;AACLN,IAAAA,MAAM,CAACW,OAAP,CAAe,CAAC;AAAEN,MAAAA,OAAF;AAAWO,MAAAA;AAAX,KAAD,KAA2B;AACxC,YAAMN,OAAO,GAAGC,QAAQ,GAACC,qBAAT,CAA+B;AAC7CH,QAAAA,OAD6C;AAE7CI,QAAAA,QAAQ,EAAER,IAAI,CAACQ,QAF8B;AAG7CC,QAAAA,EAAE,EAAE;AAHyC,OAA/B,CAAhB;AAKA,0BAAK,aAAYE,QAAS,eAAcN,OAAQ,EAAhD;AACD,KAPD;AAQD;AACF;;AAED,eAAeO,iBAAf,CAAiCb,MAAjC,EAA0E;AACxE,MAAIA,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AAAA;;AACvB,wBAAK,iBAAD,qCAAiBJ,MAAM,CAAC,CAAD,CAAvB,mEAAiB,SAAWc,SAA5B,uDAAiB,mBAAsBC,QAAvC,yEAAmD,EAAG,EAA1D;AACD,GAFD,MAEO;AACLf,IAAAA,MAAM,CACHgB,MADH,CACUC,KAAK,IAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,MAAP,MAAkB,UADrC,EAEGP,OAFH,CAEWM,KAAK,IAAI;AAAA;;AAChB,0BAAK,aAAYA,KAAb,aAAaA,KAAb,uBAAaA,KAAK,CAAEL,QAAS,mBAA7B,yBAA+CK,KAA/C,aAA+CA,KAA/C,2CAA+CA,KAAK,CAAEH,SAAtD,qDAA+C,iBAAkBC,QAAjE,yEAA6E,EAAG,EAApF;AACD,KAJH;AAKD;AACF","sourcesContent":["import { UserManager } from '@expo/xdl';\n\nimport log from '../../../../log';\nimport * as UrlUtils from '../../../utils/url';\nimport { Build } from '../../types';\n\nasync function printLogsUrls(\n  accountName: string,\n  builds: { platform: 'android' | 'ios'; buildId: string }[]\n): Promise<void> {\n  const user = await UserManager.ensureLoggedInAsync();\n  if (builds.length === 1) {\n    const { buildId } = builds[0];\n    const logsUrl = UrlUtils.constructBuildLogsUrl({\n      buildId,\n      username: accountName,\n      v2: true,\n    });\n    log(`Logs url: ${logsUrl}`);\n  } else {\n    builds.forEach(({ buildId, platform }) => {\n      const logsUrl = UrlUtils.constructBuildLogsUrl({\n        buildId,\n        username: user.username,\n        v2: true,\n      });\n      log(`Platform: ${platform}, Logs url: ${logsUrl}`);\n    });\n  }\n}\n\nasync function printBuildResults(builds: (Build | null)[]): Promise<void> {\n  if (builds.length === 1) {\n    log(`Artifact url: ${builds[0]?.artifacts?.buildUrl ?? ''}`);\n  } else {\n    builds\n      .filter(build => build?.status === 'finished')\n      .forEach(build => {\n        log(`Platform: ${build?.platform}, Artifact url: ${build?.artifacts?.buildUrl ?? ''}`);\n      });\n  }\n}\n\nexport { printLogsUrls, printBuildResults };\n"],"file":"misc.js"}