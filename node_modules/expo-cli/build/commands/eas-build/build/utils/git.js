"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureGitStatusIsCleanAsync = ensureGitStatusIsCleanAsync;
exports.makeProjectTarballAsync = makeProjectTarballAsync;
exports.commitChangesAsync = commitChangesAsync;
exports.showDiff = showDiff;
exports.DirtyGitTreeError = void 0;

function _spawnAsync() {
  const data = _interopRequireDefault(require("@expo/spawn-async"));

  _spawnAsync = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _prompts() {
  const data = _interopRequireDefault(require("../../../../prompts"));

  _prompts = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function ensureGitStatusIsCleanAsync() {
  const changes = (await (0, _spawnAsync().default)('git', ['status', '-s', '-uno'])).stdout;

  if (changes.length > 0) {
    throw new DirtyGitTreeError('Please commit all changes before building your project. Aborting...');
  }
}

class DirtyGitTreeError extends Error {}

exports.DirtyGitTreeError = DirtyGitTreeError;

async function makeProjectTarballAsync(tarPath) {
  const spinner = (0, _ora().default)('Making project tarball').start();
  await (0, _spawnAsync().default)('git', ['archive', '--format=tar.gz', '--prefix', 'project/', '-o', tarPath, 'HEAD']);
  spinner.succeed('Project tarball created.');
  const {
    size
  } = await _fsExtra().default.stat(tarPath);
  return size;
}

async function showDiff() {
  await (0, _spawnAsync().default)('git', ['--no-pager', 'diff'], {
    stdio: ['ignore', 'inherit', 'inherit']
  });
}

async function commitChangesAsync(commitMessage) {
  if (!commitMessage) {
    const promptResult = await (0, _prompts().default)({
      type: 'text',
      name: 'message',
      message: 'Commit message:',
      initial: 'Configure Xcode project',
      validate: input => input !== ''
    });
    commitMessage = promptResult.message;
  } // add changed files only


  await (0, _spawnAsync().default)('git', ['add', '-u']);
  await (0, _spawnAsync().default)('git', ['commit', '-m', commitMessage]);
}
//# sourceMappingURL=git.js.map