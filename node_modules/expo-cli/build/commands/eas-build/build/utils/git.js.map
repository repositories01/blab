{"version":3,"sources":["../../../../../src/commands/eas-build/build/utils/git.ts"],"names":["ensureGitStatusIsCleanAsync","changes","stdout","length","DirtyGitTreeError","Error","makeProjectTarballAsync","tarPath","spinner","start","succeed","size","fs","stat","showDiff","stdio","commitChangesAsync","commitMessage","promptResult","type","name","message","initial","validate","input"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,2BAAf,GAA4D;AAC1D,QAAMC,OAAO,GAAG,CAAC,MAAM,2BAAW,KAAX,EAAkB,CAAC,QAAD,EAAW,IAAX,EAAiB,MAAjB,CAAlB,CAAP,EAAoDC,MAApE;;AACA,MAAID,OAAO,CAACE,MAAR,GAAiB,CAArB,EAAwB;AACtB,UAAM,IAAIC,iBAAJ,CACJ,qEADI,CAAN;AAGD;AACF;;AAED,MAAMA,iBAAN,SAAgCC,KAAhC,CAAsC;;;;AAEtC,eAAeC,uBAAf,CAAuCC,OAAvC,EAAyE;AACvE,QAAMC,OAAO,GAAG,oBAAI,wBAAJ,EAA8BC,KAA9B,EAAhB;AACA,QAAM,2BAAW,KAAX,EAAkB,CACtB,SADsB,EAEtB,iBAFsB,EAGtB,UAHsB,EAItB,UAJsB,EAKtB,IALsB,EAMtBF,OANsB,EAOtB,MAPsB,CAAlB,CAAN;AASAC,EAAAA,OAAO,CAACE,OAAR,CAAgB,0BAAhB;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMC,mBAAGC,IAAH,CAAQN,OAAR,CAAvB;AACA,SAAOI,IAAP;AACD;;AAED,eAAeG,QAAf,GAAyC;AACvC,QAAM,2BAAW,KAAX,EAAkB,CAAC,YAAD,EAAe,MAAf,CAAlB,EAA0C;AAAEC,IAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,SAAX,EAAsB,SAAtB;AAAT,GAA1C,CAAN;AACD;;AAED,eAAeC,kBAAf,CAAkCC,aAAlC,EAAyE;AACvE,MAAI,CAACA,aAAL,EAAoB;AAClB,UAAMC,YAAY,GAAG,MAAM,wBAAQ;AACjCC,MAAAA,IAAI,EAAE,MAD2B;AAEjCC,MAAAA,IAAI,EAAE,SAF2B;AAGjCC,MAAAA,OAAO,EAAE,iBAHwB;AAIjCC,MAAAA,OAAO,EAAE,yBAJwB;AAKjCC,MAAAA,QAAQ,EAAEC,KAAK,IAAIA,KAAK,KAAK;AALI,KAAR,CAA3B;AAOAP,IAAAA,aAAa,GAAGC,YAAY,CAACG,OAA7B;AACD,GAVsE,CAYvE;;;AACA,QAAM,2BAAW,KAAX,EAAkB,CAAC,KAAD,EAAQ,IAAR,CAAlB,CAAN;AACA,QAAM,2BAAW,KAAX,EAAkB,CAAC,QAAD,EAAW,IAAX,EAAiBJ,aAAjB,CAAlB,CAAN;AACD","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport ora from 'ora';\n\nimport prompts from '../../../../prompts';\n\nasync function ensureGitStatusIsCleanAsync(): Promise<void> {\n  const changes = (await spawnAsync('git', ['status', '-s', '-uno'])).stdout;\n  if (changes.length > 0) {\n    throw new DirtyGitTreeError(\n      'Please commit all changes before building your project. Aborting...'\n    );\n  }\n}\n\nclass DirtyGitTreeError extends Error {}\n\nasync function makeProjectTarballAsync(tarPath: string): Promise<number> {\n  const spinner = ora('Making project tarball').start();\n  await spawnAsync('git', [\n    'archive',\n    '--format=tar.gz',\n    '--prefix',\n    'project/',\n    '-o',\n    tarPath,\n    'HEAD',\n  ]);\n  spinner.succeed('Project tarball created.');\n\n  const { size } = await fs.stat(tarPath);\n  return size;\n}\n\nasync function showDiff(): Promise<void> {\n  await spawnAsync('git', ['--no-pager', 'diff'], { stdio: ['ignore', 'inherit', 'inherit'] });\n}\n\nasync function commitChangesAsync(commitMessage?: string): Promise<void> {\n  if (!commitMessage) {\n    const promptResult = await prompts({\n      type: 'text',\n      name: 'message',\n      message: 'Commit message:',\n      initial: 'Configure Xcode project',\n      validate: input => input !== '',\n    });\n    commitMessage = promptResult.message as string;\n  }\n\n  // add changed files only\n  await spawnAsync('git', ['add', '-u']);\n  await spawnAsync('git', ['commit', '-m', commitMessage]);\n}\n\nexport {\n  DirtyGitTreeError,\n  ensureGitStatusIsCleanAsync,\n  makeProjectTarballAsync,\n  commitChangesAsync,\n  showDiff,\n};\n"],"file":"git.js"}