{"version":3,"sources":["../../../src/commands/eas-build/index.ts"],"names":["program","easJsonPath","path","join","process","cwd","fs","pathExistsSync","command","description","option","asyncActionProjectDir","buildAction","checkConfig","statusAction"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEe,kBAAUA,OAAV,EAA4B;AACzC;AACA,QAAMC,WAAW,GAAGC,gBAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CAApB;;AACA,MAAI,CAACC,mBAAGC,cAAH,CAAkBN,WAAlB,CAAL,EAAqC;AACnC;AACD;;AAEDD,EAAAA,OAAO,CACJQ,OADH,CACW,yBADX,EAEGC,WAFH,CAEe,uCAFf,EAGGC,MAHH,CAII,0BAJJ,EAKI,iDALJ,EAMI,sBANJ,EAQGA,MARH,CAQU,0BARV,EAQsC,2BARtC,EAQmE,KARnE,EASGA,MATH,CASU,WATV,EASuB,yCATvB,EASkE,KATlE,EAUGA,MAVH,CAUU,qBAVV,EAUiC,eAVjC,EAUkD,SAVlD,EAWGC,qBAXH,CAWyBC,iBAXzB,EAWsC;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAXtC;AAaAb,EAAAA,OAAO,CACJQ,OADH,CACW,gCADX,EAEGC,WAFH,CAEe,uDAFf,EAGGC,MAHH,CAII,0BAJJ,EAKI,sDALJ,EAMI,sBANJ,EAQGA,MARH,CASI,sBATJ,EAUI,gFAVJ,EAWI,2CAXJ,EAaGA,MAbH,CAaU,0BAbV,EAasC,wCAbtC,EAcGC,qBAdH,CAcyBG,kBAdzB,EAcuC;AAAED,IAAAA,WAAW,EAAE;AAAf,GAdvC;AAeD","sourcesContent":["import { Command } from 'commander';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport buildAction from './build/action';\nimport statusAction from './status/action';\n\nexport default function (program: Command) {\n  // don't register `expo eas:build:*` commands if eas.json doesn't exist\n  const easJsonPath = path.join(process.cwd(), 'eas.json');\n  if (!fs.pathExistsSync(easJsonPath)) {\n    return;\n  }\n\n  program\n    .command('eas:build [project-dir]')\n    .description('Build an app binary for your project.')\n    .option(\n      '-p --platform <platform>',\n      'Build for specified platform: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option('--skip-credentials-check', 'Skip checking credentials', false)\n    .option('--no-wait', 'Exit immediately after scheduling build', false)\n    .option('--profile <profile>', 'Build profile', 'release')\n    .asyncActionProjectDir(buildAction, { checkConfig: true });\n\n  program\n    .command('eas:build:status [project-dir]')\n    .description('Get the status of the latest builds for your project.')\n    .option(\n      '-p --platform <platform>',\n      'Get builds for specified platform: ios, android, all',\n      /^(all|android|ios)$/i\n    )\n    .option(\n      '-s --status <status>',\n      'Get builds with the specified status: in-queue, in-progress, errored, finished',\n      /^(in-queue|in-progress|errored|finished)$/\n    )\n    .option('-b --build-id <build-id>', 'Get the build with a specific build id')\n    .asyncActionProjectDir(statusAction, { checkConfig: true });\n}\n"],"file":"index.js"}