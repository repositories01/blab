{"version":3,"sources":["../../src/commands/export.ts"],"names":["action","projectDir","options","outputPath","path","resolve","outputDir","overwrite","force","fs","existsSync","question","type","name","message","CommandError","outputBundlesDir","outputAssetsDir","outputAndroidJson","outputiOSJson","removeSync","publicUrl","dev","UrlUtils","isHttps","validator","isURL","protocols","console","warn","exportOptions","dumpAssetmap","dumpSourcemap","isDev","publishOptions","resetCache","clear","target","absoluteOutputDir","process","cwd","Project","exportForAppHosting","assetUrl","mergeSrcDirs","mergeSrcUrl","length","tmpFolder","join","remove","ensureDir","downloadDecompressPromises","map","url","uniqFilename","basename","crypto","randomBytes","toString","tmpFileCompressed","tmpFolderUncompressed","download","decompress","push","Promise","all","mergeSrcDir","srcDirs","concat","mergeAppDistributions","uri","filename","response","method","responseType","data","pipe","createWriteStream","reject","on","err","src","dest","targz","error","collect","val","memo","program","command","description","option","asyncActionProjectDir","checkConfig"],"mappings":"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","sourcesContent":["import { ProjectTarget, getDefaultTarget } from '@expo/config';\nimport { Project, ProjectSettings, UrlUtils } from '@expo/xdl';\nimport axios from 'axios';\nimport { Command } from 'commander';\nimport crypto from 'crypto';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport targz from 'targz';\nimport validator from 'validator';\n\nimport CommandError from '../CommandError';\nimport { installExitHooks } from '../exit';\nimport log from '../log';\nimport prompt, { Question } from '../prompt';\n\ntype Options = {\n  outputDir: string;\n  assetUrl: string;\n  publicUrl?: string;\n  mergeSrcUrl: string[];\n  mergeSrcDir: string[];\n  dev: boolean;\n  clear: boolean;\n  quiet: boolean;\n  target?: ProjectTarget;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n  maxWorkers?: number;\n  force: boolean;\n};\n\nexport async function action(projectDir: string, options: Options) {\n  const outputPath = path.resolve(projectDir, options.outputDir);\n  let overwrite = options.force;\n  if (fs.existsSync(outputPath)) {\n    if (!overwrite) {\n      const question: Question = {\n        type: 'confirm',\n        name: 'action',\n        message: `Output directory ${outputPath} already exists.\\nThe following files and directories will be overwritten if they exist:\\n- ${options.outputDir}/bundles\\n- ${options.outputDir}/assets\\n- ${options.outputDir}/ios-index.json\\n- ${options.outputDir}/android-index.json\\nWould you like to continue?`,\n      };\n\n      const { action } = await prompt(question);\n      if (action) {\n        overwrite = true;\n      } else {\n        throw new CommandError(\n          'OUTPUT_DIR_EXISTS',\n          `Output directory ${outputPath} already exists. Aborting export.`\n        );\n      }\n    }\n    if (overwrite) {\n      log(`Removing old files from ${outputPath}`);\n      const outputBundlesDir = path.resolve(outputPath, 'bundles');\n      const outputAssetsDir = path.resolve(outputPath, 'assets');\n      const outputAndroidJson = path.resolve(outputPath, 'android-index.json');\n      const outputiOSJson = path.resolve(outputPath, 'ios-index.json');\n      if (fs.existsSync(outputBundlesDir)) {\n        fs.removeSync(outputBundlesDir);\n      }\n      if (fs.existsSync(outputAssetsDir)) {\n        fs.removeSync(outputAssetsDir);\n      }\n      if (fs.existsSync(outputAndroidJson)) {\n        fs.removeSync(outputAndroidJson);\n      }\n      if (fs.existsSync(outputiOSJson)) {\n        fs.removeSync(outputiOSJson);\n      }\n    }\n  }\n  if (!options.publicUrl) {\n    throw new CommandError('MISSING_PUBLIC_URL', 'Missing required option: --public-url');\n  }\n  // If we are not in dev mode, ensure that url is https\n  if (!options.dev && !UrlUtils.isHttps(options.publicUrl)) {\n    throw new CommandError('INVALID_PUBLIC_URL', '--public-url must be a valid HTTPS URL.');\n  } else if (!validator.isURL(options.publicUrl, { protocols: ['http', 'https'] })) {\n    console.warn(`Dev Mode: publicUrl ${options.publicUrl} does not conform to HTTP format.`);\n  }\n\n  // Make outputDir an absolute path if it isnt already\n  const exportOptions = {\n    dumpAssetmap: options.dumpAssetmap,\n    dumpSourcemap: options.dumpSourcemap,\n    isDev: options.dev,\n    publishOptions: {\n      resetCache: !!options.clear,\n      target: options.target ?? getDefaultTarget(projectDir),\n    },\n  };\n  const absoluteOutputDir = path.resolve(process.cwd(), options.outputDir);\n  await Project.exportForAppHosting(\n    projectDir,\n    options.publicUrl,\n    options.assetUrl,\n    absoluteOutputDir,\n    exportOptions\n  );\n\n  // Merge src dirs/urls into a multimanifest if specified\n  const mergeSrcDirs = [];\n\n  // src urls were specified to merge in, so download and decompress them\n  if (options.mergeSrcUrl.length > 0) {\n    // delete .tmp if it exists and recreate it anew\n    const tmpFolder = path.resolve(projectDir, path.join('.tmp'));\n    await fs.remove(tmpFolder);\n    await fs.ensureDir(tmpFolder);\n\n    // Download the urls into a tmp dir\n    const downloadDecompressPromises = options.mergeSrcUrl.map(\n      async (url: string): Promise<void> => {\n        // Add the absolute paths to srcDir\n        const uniqFilename = `${path.basename(url, '.tar.gz')}_${crypto\n          .randomBytes(16)\n          .toString('hex')}`;\n        const tmpFileCompressed = path.resolve(tmpFolder, uniqFilename + '_compressed');\n        const tmpFolderUncompressed = path.resolve(tmpFolder, uniqFilename);\n        await download(url, tmpFileCompressed);\n        await decompress(tmpFileCompressed, tmpFolderUncompressed);\n\n        // add the decompressed folder to be merged\n        mergeSrcDirs.push(tmpFolderUncompressed);\n      }\n    );\n\n    await Promise.all(downloadDecompressPromises);\n  }\n\n  // add any local src dirs to be merged\n  mergeSrcDirs.push(...options.mergeSrcDir);\n\n  if (mergeSrcDirs.length > 0) {\n    const srcDirs = options.mergeSrcDir.concat(options.mergeSrcUrl).join(' ');\n    log(`Starting project merge of ${srcDirs} into ${options.outputDir}`);\n\n    // Merge app distributions\n    await Project.mergeAppDistributions(\n      projectDir,\n      [...mergeSrcDirs, options.outputDir], // merge stuff in srcDirs and outputDir together\n      options.outputDir\n    );\n    log(`Project merge was successful. Your merged files can be found in ${options.outputDir}`);\n  }\n  log(`Export was successful. Your exported files can be found in ${options.outputDir}`);\n}\n\nconst download = async (uri: string, filename: string): Promise<null> => {\n  const response = await axios({\n    method: 'get',\n    url: uri,\n    responseType: 'stream',\n  });\n\n  response.data.pipe(fs.createWriteStream(filename));\n\n  return new Promise((resolve, reject) => {\n    response.data.on('close', () => resolve(null));\n    response.data.on('error', (err?: Error) => {\n      reject(err);\n    });\n  });\n};\n\nconst decompress = async (src: string, dest: string): Promise<null> => {\n  return new Promise((resolve, reject) => {\n    targz.decompress(\n      {\n        src,\n        dest,\n      },\n      (error: string | Error | null) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(null);\n        }\n      }\n    );\n  });\n};\n\nfunction collect<T>(val: T, memo: T[]): T[] {\n  memo.push(val);\n  return memo;\n}\n\nexport default function (program: Command) {\n  program\n    .command('export [project-dir]')\n    .description('Exports the static files of the app for hosting it on a web server.')\n    .option('-p, --public-url <url>', 'The public url that will host the static files. (Required)')\n    .option(\n      '--output-dir <dir>',\n      'The directory to export the static files to. Default directory is `dist`',\n      'dist'\n    )\n    .option(\n      '-a, --asset-url <url>',\n      \"The absolute or relative url that will host the asset files. Default is './assets', which will be resolved against the public-url.\",\n      './assets'\n    )\n    .option('-d, --dump-assetmap', 'Dump the asset map for further processing.')\n    .option('--dev', 'Configures static files for developing locally using a non-https server')\n    .option('-f, --force', 'Overwrite files in output directory without prompting for confirmation')\n    .option('-s, --dump-sourcemap', 'Dump the source map for debugging the JS bundle.')\n    .option('-q, --quiet', 'Suppress verbose output.')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this export is intended. Options are `managed` or `bare`.'\n    )\n    .option('--merge-src-dir [dir]', 'A repeatable source dir to merge in.', collect, [])\n    .option(\n      '--merge-src-url [url]',\n      'A repeatable source tar.gz file URL to merge in.',\n      collect,\n      []\n    )\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .asyncActionProjectDir(action, { checkConfig: true });\n}\n"],"file":"export.js"}