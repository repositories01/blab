{"version":3,"sources":["../../src/commands/publish.ts"],"names":["action","projectDir","options","channelRe","RegExp","releaseChannel","test","log","error","process","exit","exp","pkg","skipSDKVersionRequirement","dependencies","warn","chalk","bold","hasOptimized","fs","existsSync","path","join","nonInteractive","parent","newLine","target","recipient","sendTo","getRecipient","args","sdkVersion","Exp","getPublishInfoAsync","buildStatus","Project","getBuildStatusAsync","platform","current","userHasBuiltExperienceBefore","userHasBuiltAppBefore","duringBuild","isDetached","quiet","simpleSpinner","start","result","publishAsync","url","stop","exampleManifestUrl","getExampleManifestUrl","websiteUrl","replace","sendUrlAsync","includes","program","command","alias","description","option","asyncActionProjectDir"],"mappings":"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","sourcesContent":["import { ProjectTarget, getConfig, getDefaultTarget } from '@expo/config';\nimport simpleSpinner from '@expo/simple-spinner';\nimport { Exp, Project } from '@expo/xdl';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport path from 'path';\nimport terminalLink from 'terminal-link';\n\nimport log from '../log';\nimport sendTo from '../sendTo';\n\ntype Options = {\n  clear?: boolean;\n  sendTo?: string | boolean;\n  quiet?: boolean;\n  target?: ProjectTarget;\n  releaseChannel?: string;\n  duringBuild?: boolean;\n  maxWorkers?: number;\n  parent?: { nonInteractive: boolean };\n};\n\nexport async function action(projectDir: string, options: Options = {}) {\n  const channelRe = new RegExp(/^[a-z\\d][a-z\\d._-]*$/);\n  if (options.releaseChannel && !channelRe.test(options.releaseChannel)) {\n    log.error(\n      'Release channel name can only contain lowercase letters, numbers and special characters . _ and -'\n    );\n    process.exit(1);\n  }\n\n  const { exp, pkg } = getConfig(projectDir, {\n    skipSDKVersionRequirement: true,\n  });\n\n  if (pkg.dependencies['expo-updates'] && pkg.dependencies['expokit']) {\n    log.warn(\n      `Warning: You have both the ${chalk.bold('expokit')} and ${chalk.bold(\n        'expo-updates'\n      )} packages installed in package.json.`\n    );\n    log.warn(\n      `These two packages are incompatible and ${chalk.bold(\n        'publishing updates with expo-updates will not work if expokit is installed.'\n      )}`\n    );\n    log.warn(\n      `If you intend to use ${chalk.bold('expo-updates')}, please remove ${chalk.bold(\n        'expokit'\n      )} from your dependencies.`\n    );\n  }\n\n  const hasOptimized = fs.existsSync(path.join(projectDir, '/.expo-shared/assets.json'));\n  const nonInteractive = options.parent && options.parent.nonInteractive;\n  if (!hasOptimized && !nonInteractive) {\n    log.warn(\n      'Warning: your project may contain unoptimized image assets. Smaller image sizes can improve app performance.'\n    );\n    log.warn(\n      `To compress the images in your project, abort publishing and run ${chalk.bold(\n        'npx expo-optimize'\n      )}.`\n    );\n    log.newLine();\n  }\n\n  const target = options.target ?? getDefaultTarget(projectDir);\n\n  // Warn users if they attempt to publish in a bare project that may also be\n  // using Expo client and does not If the developer does not have the Expo\n  // package installed then we do not need to warn them as there is no way that\n  // it will run in Expo client in development even. We should revisit this with\n  // dev client, and possibly also by excluding SDK version for bare\n  // expo-updates usage in the future (and then surfacing this as an error in\n  // the Expo client app instead)\n  // Related: https://github.com/expo/expo/issues/9517\n  if (pkg.dependencies['expo'] && !options.target && target === 'bare') {\n    log.warn(\n      `Warning: this is a ${chalk.bold(\n        'bare workflow'\n      )} project. The resulting publish will only run properly inside of a native build of your project.`\n    );\n\n    log.warn(\n      `If you want to publish a version of your app that will run in Expo client, please use ${chalk.bold(\n        'expo publish --target managed'\n      )}.`\n    );\n\n    log.warn(\n      `You can skip this warning by explicitly running ${chalk.bold(\n        'expo publish --target bare'\n      )} in the future.`\n    );\n    log.newLine();\n  }\n\n  const recipient = await sendTo.getRecipient(options.sendTo);\n  log(`Publishing to channel '${options.releaseChannel}'...`);\n\n  const {\n    args: { sdkVersion },\n  } = await Exp.getPublishInfoAsync(projectDir);\n\n  const buildStatus = await Project.getBuildStatusAsync(projectDir, {\n    platform: 'all',\n    current: true,\n    releaseChannel: options.releaseChannel,\n    sdkVersion,\n  });\n\n  if (\n    'userHasBuiltExperienceBefore' in buildStatus &&\n    buildStatus.userHasBuiltExperienceBefore &&\n    !buildStatus.userHasBuiltAppBefore &&\n    !options.duringBuild &&\n    !exp.isDetached\n  ) {\n    log.warn(\n      'We noticed that you have not built a standalone app with this SDK version and release channel before. ' +\n        'Remember that OTA updates will only work for builds with matching SDK versions and release channels. ' +\n        'Read more here: https://docs.expo.io/workflow/publishing/#limitations'\n    );\n  }\n\n  if (options.quiet) {\n    simpleSpinner.start();\n  }\n\n  const result = await Project.publishAsync(projectDir, {\n    releaseChannel: options.releaseChannel,\n    quiet: options.quiet,\n    target,\n  });\n\n  const url = result.url;\n\n  if (options.quiet) {\n    simpleSpinner.stop();\n  }\n\n  log('Publish complete');\n  log.newLine();\n\n  const exampleManifestUrl = getExampleManifestUrl(url, exp.sdkVersion);\n  if (exampleManifestUrl) {\n    log(\n      `The manifest URL is: ${terminalLink(url, exampleManifestUrl)}. ${terminalLink(\n        'Learn more.',\n        'https://expo.fyi/manifest-url'\n      )}`\n    );\n  } else {\n    log(\n      `The manifest URL is: ${terminalLink(url, url)}. ${terminalLink(\n        'Learn more.',\n        'https://expo.fyi/manifest-url'\n      )}`\n    );\n  }\n\n  if (target === 'managed') {\n    // TODO: replace with websiteUrl from server when it is available, if that makes sense.\n    const websiteUrl = url.replace('exp.host', 'expo.io');\n    log(\n      `The project page is: ${terminalLink(websiteUrl, websiteUrl)}. ${terminalLink(\n        'Learn more.',\n        'https://expo.fyi/project-page'\n      )}`\n    );\n\n    if (recipient) {\n      await sendTo.sendUrlAsync(websiteUrl, recipient);\n    }\n  } else {\n    // This seems pointless in bare?? Leaving it out\n    // if (recipient) {\n    //   await sendTo.sendUrlAsync(url, recipient);\n    // }\n  }\n  return result;\n}\n\nfunction getExampleManifestUrl(url: string, sdkVersion: string | undefined): string | null {\n  if (!sdkVersion) {\n    return null;\n  }\n\n  if (url.includes('release-channel') && url.includes('?release-channel')) {\n    return (\n      url.replace('?release-channel', '/index.exp?release-channel') + `&sdkVersion=${sdkVersion}`\n    );\n  } else if (url.includes('?') && !url.includes('release-channel')) {\n    // This is the only relevant url query param we are aware of at the time of\n    // writing this code, so if there is some other param included we don't know\n    // how to deal with it and log nothing.\n    return null;\n  } else {\n    return `${url}/index.exp?sdkVersion=${sdkVersion}`;\n  }\n}\n\nexport default function (program: Command) {\n  program\n    .command('publish [project-dir]')\n    .alias('p')\n    .description('Publishes your project to exp.host')\n    .option('-q, --quiet', 'Suppress verbose output from the Metro bundler.')\n    .option('-s, --send-to [dest]', 'A phone number or email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    .option(\n      '-t, --target [env]',\n      'Target environment for which this publish is intended. Options are `managed` or `bare`.'\n    )\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option(\n      '--release-channel <release channel>',\n      \"The release channel to publish to. Default is 'default'.\",\n      'default'\n    )\n    .asyncActionProjectDir(action);\n}\n"],"file":"publish.js"}