{"version":3,"sources":["../../../src/commands/apply/configureIOSProjectAsync.ts"],"names":["configureIOSProjectAsync","projectRoot","exp","skipSDKVersionRequirement","username","UserManager","getCurrentUsernameAsync","IOSConfig","BundleIdenitifer","setBundleIdentifierForPbxproj","ios","bundleIdentifier","Google","setGoogleServicesFile","DeviceFamily","setDeviceFamily","modifyInfoPlistAsync","infoPlist","CustomInfoPlistEntries","setCustomInfoPlistEntries","Branch","setBranchApiKey","Facebook","setFacebookConfig","setGoogleConfig","Name","setDisplayName","Orientation","setOrientation","RequiresFullScreen","setRequiresFullScreen","Scheme","setScheme","UserInterfaceStyle","setUserInterfaceStyle","UsesNonExemptEncryption","setUsesNonExemptEncryption","Version","setBuildNumber","setVersion","modifyExpoPlistAsync","expoPlist","Updates","setUpdatesConfig","modifyEntitlementsPlistAsync","entitlementsPlist","Entitlements","setICloudEntitlement","setAppleSignInEntitlement","setAccessesContactNotes","setAssociatedDomains","e","WarningAggregator","addWarningIOS","Icons","setIconsAsync","SplashScreen","setSplashScreenAsync","Locales","setLocalesAsync","callback","entitlementsPath","getEntitlementsPath","directory","path","dirname","filename","basename","IosPlist","modifyAsync","cleanBackupAsync","iosProjectDirectory","getIOSPaths","supportingDirectory","join","error","sanitizedName","name","replace","normalize","projectName","Error","iconPath"],"mappings":"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","sourcesContent":["import { IOSConfig, WarningAggregator, getConfig } from '@expo/config';\nimport { IosPlist, UserManager } from '@expo/xdl';\nimport path from 'path';\n\nexport default async function configureIOSProjectAsync(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const username = await UserManager.getCurrentUsernameAsync();\n\n  IOSConfig.BundleIdenitifer.setBundleIdentifierForPbxproj(projectRoot, exp.ios!.bundleIdentifier!);\n  IOSConfig.Google.setGoogleServicesFile(exp, projectRoot);\n  IOSConfig.DeviceFamily.setDeviceFamily(exp, projectRoot);\n\n  // Configure the Info.plist\n  await modifyInfoPlistAsync(projectRoot, infoPlist => {\n    infoPlist = IOSConfig.CustomInfoPlistEntries.setCustomInfoPlistEntries(exp, infoPlist);\n    infoPlist = IOSConfig.Branch.setBranchApiKey(exp, infoPlist);\n    infoPlist = IOSConfig.Facebook.setFacebookConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Google.setGoogleConfig(exp, infoPlist);\n    infoPlist = IOSConfig.Name.setDisplayName(exp, infoPlist);\n    infoPlist = IOSConfig.Orientation.setOrientation(exp, infoPlist);\n    infoPlist = IOSConfig.RequiresFullScreen.setRequiresFullScreen(exp, infoPlist);\n    infoPlist = IOSConfig.Scheme.setScheme(exp, infoPlist);\n    infoPlist = IOSConfig.UserInterfaceStyle.setUserInterfaceStyle(exp, infoPlist);\n    infoPlist = IOSConfig.UsesNonExemptEncryption.setUsesNonExemptEncryption(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setBuildNumber(exp, infoPlist);\n    infoPlist = IOSConfig.Version.setVersion(exp, infoPlist);\n\n    return infoPlist;\n  });\n\n  // Configure Expo.plist\n  await modifyExpoPlistAsync(projectRoot, expoPlist => {\n    expoPlist = IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n    return expoPlist;\n  });\n\n  // TODO: fix this on Windows! We will ignore errors for now so people can just proceed\n  try {\n    // Configure entitlements/capabilities\n    await modifyEntitlementsPlistAsync(projectRoot, entitlementsPlist => {\n      // TODO: We don't have a mechanism for getting the apple team id here yet\n      entitlementsPlist = IOSConfig.Entitlements.setICloudEntitlement(\n        exp,\n        'TODO-GET-APPLE-TEAM-ID',\n        entitlementsPlist\n      );\n\n      entitlementsPlist = IOSConfig.Entitlements.setAppleSignInEntitlement(exp, entitlementsPlist);\n      entitlementsPlist = IOSConfig.Entitlements.setAccessesContactNotes(exp, entitlementsPlist);\n      entitlementsPlist = IOSConfig.Entitlements.setAssociatedDomains(exp, entitlementsPlist);\n      return entitlementsPlist;\n    });\n  } catch (e) {\n    WarningAggregator.addWarningIOS(\n      'entitlements',\n      'iOS entitlements could not be applied. Please ensure that contact notes, Apple Sign In, and associated domains entitlements are properly configured if you use them in your app.'\n    );\n  }\n\n  // Other\n  await IOSConfig.Icons.setIconsAsync(exp, projectRoot);\n  await IOSConfig.SplashScreen.setSplashScreenAsync(exp, projectRoot);\n  await IOSConfig.Locales.setLocalesAsync(exp, projectRoot);\n}\n\nasync function modifyEntitlementsPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const entitlementsPath = IOSConfig.Entitlements.getEntitlementsPath(projectRoot);\n  const directory = path.dirname(entitlementsPath);\n  const filename = path.basename(entitlementsPath, 'plist');\n  await IosPlist.modifyAsync(directory, filename, callback);\n  await IosPlist.cleanBackupAsync(directory, filename, false);\n}\n\nasync function modifyInfoPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const { iosProjectDirectory } = getIOSPaths(projectRoot);\n  await IosPlist.modifyAsync(iosProjectDirectory, 'Info', callback);\n  await IosPlist.cleanBackupAsync(iosProjectDirectory, 'Info', false);\n}\n\nasync function modifyExpoPlistAsync(projectRoot: string, callback: (plist: any) => any) {\n  const { iosProjectDirectory } = getIOSPaths(projectRoot);\n  const supportingDirectory = path.join(iosProjectDirectory, 'Supporting');\n  try {\n    await IosPlist.modifyAsync(supportingDirectory, 'Expo', callback);\n  } catch (error) {\n    WarningAggregator.addWarningIOS(\n      'updates',\n      'Expo.plist configuration could not be applied. You will need to create Expo.plist if it does not exist and add Updates configuration manually.',\n      'https://docs.expo.io/bare/updating-your-app/#configuration-options'\n    );\n  } finally {\n    await IosPlist.cleanBackupAsync(supportingDirectory, 'Expo', false);\n  }\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nfunction sanitizedName(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nfunction getIOSPaths(projectRoot: string) {\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n  const projectName = exp.name;\n  if (!projectName) {\n    throw new Error('Your project needs a name in app.json/app.config.js.');\n  }\n\n  const iosProjectDirectory = path.join(projectRoot, 'ios', sanitizedName(projectName));\n  const iconPath = path.join(iosProjectDirectory, 'Assets.xcassets', 'AppIcon.appiconset');\n\n  return {\n    projectName,\n    iosProjectDirectory,\n    iconPath,\n  };\n}\n"],"file":"configureIOSProjectAsync.js"}