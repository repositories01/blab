{"version":3,"sources":["../../../src/credentials/api/AndroidApi.ts"],"names":["AndroidApi","constructor","api","fetchAll","shouldRefetchAll","credentials","getAsync","fetchKeystore","experienceName","_ensureCredentialsFetched","keystore","fetchCredentials","updateKeystore","putAsync","pushCredentials","updateFcmKey","fcmApiKey","removeKeystore","deleteAsync","response"],"mappings":"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","sourcesContent":["import { ApiV2 } from '@expo/xdl';\nimport keyBy from 'lodash/keyBy';\n\nimport { AndroidCredentials, Keystore } from '../credentials';\n\nexport default class AndroidApi {\n  private shouldRefetchAll: boolean = true;\n  private credentials: { [key: string]: AndroidCredentials } = {};\n\n  constructor(private api: ApiV2) {}\n\n  public async fetchAll(): Promise<{ [key: string]: AndroidCredentials }> {\n    if (this.shouldRefetchAll) {\n      this.credentials = keyBy(\n        (await this.api.getAsync('credentials/android'))?.credentials || [],\n        'experienceName'\n      );\n      this.shouldRefetchAll = false;\n    }\n    return this.credentials;\n  }\n\n  public async fetchKeystore(experienceName: string): Promise<Keystore | null> {\n    await this._ensureCredentialsFetched(experienceName);\n    return this.credentials[experienceName]?.keystore || null;\n  }\n\n  public async fetchCredentials(experienceName: string): Promise<AndroidCredentials> {\n    await this._ensureCredentialsFetched(experienceName);\n    return this.credentials[experienceName];\n  }\n\n  public async updateKeystore(experienceName: string, keystore: Keystore): Promise<void> {\n    await this._ensureCredentialsFetched(experienceName);\n    await this.api.putAsync(`credentials/android/keystore/${experienceName}`, { keystore });\n    this.credentials[experienceName] = {\n      experienceName,\n      keystore,\n      pushCredentials: this.credentials[experienceName]?.pushCredentials,\n    };\n  }\n\n  public async updateFcmKey(experienceName: string, fcmApiKey: string): Promise<void> {\n    await this._ensureCredentialsFetched(experienceName);\n    await this.api.putAsync(`credentials/android/push/${experienceName}`, { fcmApiKey });\n    this.credentials[experienceName] = {\n      experienceName,\n      keystore: this.credentials[experienceName]?.keystore,\n      pushCredentials: { fcmApiKey },\n    };\n  }\n\n  public async removeKeystore(experienceName: string): Promise<void> {\n    await this._ensureCredentialsFetched(experienceName);\n    await this.api.deleteAsync(`credentials/android/keystore/${experienceName}`);\n    if (this.credentials[experienceName]) {\n      this.credentials[experienceName].keystore = null;\n    }\n  }\n\n  private async _ensureCredentialsFetched(experienceName: string): Promise<void> {\n    if (!this.credentials[experienceName]) {\n      const response = await this.api.getAsync(`credentials/android/${experienceName}`);\n      this.credentials[experienceName] = {\n        experienceName,\n        keystore: response?.keystore,\n        pushCredentials: response?.pushCredentials,\n      };\n    }\n  }\n}\n"],"file":"AndroidApi.js"}