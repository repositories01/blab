{"version":3,"sources":["../../../src/credentials/views/AndroidKeystore.ts"],"names":["UpdateKeystore","constructor","experienceName","open","ctx","android","fetchKeystore","displayWarning","keystore","provideOrGenerate","updateKeystore","chalk","green","providedKeystore","keystoreSchema","tmpKeystoreName","path","join","os","tmpdir","replace","fs","remove","keystoreData","AndroidCredentials","generateUploadKeystore","readFile","error","log","warn","newLine","red","bold","RemoveKeystore","nonInteractive","CommandError","questions","type","name","message","answers","confirm","DownloadKeystore","displayCredentials","outputPath","removeKeystore","options","undefined","quiet","keystoreObj","keystorePassword","keyAlias","keyPassword","keystorePath","maybeRenameExistingFile","projectDir","storeBuf","Buffer","from","writeFile","getKeystoreFromParams","keystoreAlias","process","env","EXPO_ANDROID_KEYSTORE_PASSWORD","EXPO_ANDROID_KEY_PASSWORD","console","Error","err","useKeystore","filename","desiredFilePath","resolve","pathExists","num","rename"],"mappings":"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","sourcesContent":["import { AndroidCredentials } from '@expo/xdl';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport omit from 'lodash/omit';\nimport os from 'os';\nimport path from 'path';\nimport { v4 as uuid } from 'uuid';\n\nimport CommandError from '../../CommandError';\nimport log from '../../log';\nimport prompt, { Question } from '../../prompt';\nimport { askForUserProvided } from '../actions/promptForCredentials';\nimport { Context, IView } from '../context';\nimport { Keystore, keystoreSchema } from '../credentials';\n\nclass UpdateKeystore implements IView {\n  constructor(private experienceName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (await ctx.android.fetchKeystore(this.experienceName)) {\n      this.displayWarning();\n    }\n    const keystore = await this.provideOrGenerate(ctx);\n\n    await ctx.android.updateKeystore(this.experienceName, keystore);\n    log(chalk.green('Keystore updated successfully'));\n    return null;\n  }\n\n  async provideOrGenerate(ctx: Context): Promise<Keystore> {\n    const providedKeystore = await askForUserProvided(keystoreSchema);\n    if (providedKeystore) {\n      return providedKeystore;\n    }\n\n    const tmpKeystoreName = path.join(\n      os.tmpdir(),\n      `${this.experienceName}_${uuid()}_tmp.jks`.replace('/', '__')\n    );\n    try {\n      await fs.remove(tmpKeystoreName);\n      const keystoreData = await AndroidCredentials.generateUploadKeystore(\n        tmpKeystoreName,\n        '--------------',\n        this.experienceName\n      );\n\n      return {\n        ...omit(keystoreData, 'keystorePath'),\n        keystore: await fs.readFile(tmpKeystoreName, 'base64'),\n      };\n    } catch (error) {\n      log.warn(\n        'Failed to generate Android Keystore, it will be generated on Expo servers during the build'\n      );\n      throw error;\n    } finally {\n      await fs.remove(tmpKeystoreName);\n    }\n  }\n\n  async displayWarning() {\n    log.newLine();\n    log.warn(\n      `⚠️  Updating your Android build credentials will remove previous version from our servers, this is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n  }\n}\n\nclass RemoveKeystore implements IView {\n  constructor(private experienceName: string) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    if (!(await ctx.android.fetchKeystore(this.experienceName))) {\n      log.warn('There is no valid Keystore defined for this app');\n      return null;\n    }\n\n    this.displayWarning();\n\n    if (ctx.nonInteractive) {\n      throw new CommandError(\n        'NON_INTERACTIVE',\n        \"Deleting build credentials is a destructive operation. Start the CLI without the '--non-interactive' flag to delete the credentials.\"\n      );\n    }\n\n    const questions: Question[] = [\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Permanently delete the Android build credentials from our servers?',\n      },\n    ];\n    const answers = await prompt(questions);\n    if (answers.confirm) {\n      log('Backing up your Android Keystore now...');\n      await new DownloadKeystore(this.experienceName, {\n        displayCredentials: true,\n        outputPath: `${this.experienceName}.bak.jks`.replace('/', '__'),\n      }).open(ctx);\n\n      await ctx.android.removeKeystore(this.experienceName);\n      log(chalk.green('Keystore removed successfully'));\n    }\n    return null;\n  }\n\n  async displayWarning() {\n    log.newLine();\n    log.warn(\n      `⚠️  Clearing your Android build credentials from our build servers is a ${chalk.red(\n        'PERMANENT and IRREVERSIBLE action.'\n      )}`\n    );\n    log.warn(\n      chalk.bold(\n        'Android Keystore must be identical to the one previously used to submit your app to the Google Play Store.'\n      )\n    );\n    log.warn(\n      'Please read https://docs.expo.io/distribution/building-standalone-apps/#if-you-choose-to-build-for-android for more info before proceeding.'\n    );\n    log.newLine();\n    log.warn(\n      chalk.bold('Your Keystore will be backed up to your current directory if you continue.')\n    );\n    log.newLine();\n  }\n}\n\ninterface DownloadKeystoreOptions {\n  quiet?: boolean;\n  displayCredentials?: boolean;\n  outputPath?: string;\n}\n\nclass DownloadKeystore implements IView {\n  constructor(private experienceName: string, private options?: DownloadKeystoreOptions) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    let displayCredentials;\n\n    if (this.options?.displayCredentials !== undefined) {\n      displayCredentials = this.options?.displayCredentials;\n    } else if (this.options?.quiet) {\n      displayCredentials = false;\n    } else if (ctx.nonInteractive) {\n      displayCredentials = true;\n    } else {\n      const { confirm } = await prompt({\n        type: 'confirm',\n        name: 'confirm',\n        message: 'Do you want to display the Android Keystore credentials?',\n      });\n\n      displayCredentials = confirm;\n    }\n\n    const keystoreObj = await ctx.android.fetchKeystore(this.experienceName);\n\n    const { keystore, keystorePassword, keyAlias, keyPassword }: any = keystoreObj || {};\n    if (!keystore || !keystorePassword || !keyAlias || !keyPassword) {\n      if (!this.options?.quiet) {\n        log.warn('There is no valid Keystore defined for this app');\n      }\n      return null;\n    }\n\n    const keystorePath =\n      this.options?.outputPath ?? `${this.experienceName.replace('/', '__')}.bak.jks`;\n\n    await maybeRenameExistingFile(ctx.projectDir, keystorePath);\n    if (!this.options?.quiet) {\n      log(chalk.green(`Saving Keystore to ${keystorePath}`));\n    }\n    const storeBuf = Buffer.from(keystore, 'base64');\n    await fs.writeFile(keystorePath, storeBuf);\n\n    if (this.options?.displayCredentials ?? displayCredentials) {\n      log(`Keystore credentials\n  Keystore password: ${chalk.bold(keystorePassword)}\n  Key alias:         ${chalk.bold(keyAlias)}\n  Key password:      ${chalk.bold(keyPassword)}\n\n  Path to Keystore:  ${keystorePath}\n      `);\n    }\n    return null;\n  }\n}\n\nasync function getKeystoreFromParams(options: {\n  keystorePath?: string;\n  keystoreAlias?: string;\n}): Promise<Keystore | null> {\n  const keyAlias = options.keystoreAlias;\n  const keystorePath = options.keystorePath;\n  const keystorePassword = process.env.EXPO_ANDROID_KEYSTORE_PASSWORD;\n  const keyPassword = process.env.EXPO_ANDROID_KEY_PASSWORD;\n  if (!keyAlias && !keystorePath) {\n    return null;\n  }\n\n  if (!keystorePath || !keyAlias || !keystorePassword || !keyPassword) {\n    console.log(keystorePath, keyAlias, keystorePassword, keyPassword);\n    throw new Error(\n      'In order to provide a Keystore through the CLI parameters, you have to pass --keystore-alias, --keystore-path parameters and set EXPO_ANDROID_KEY_PASSWORD and EXPO_ANDROID_KEYSTORE_PASSWORD environment variables.'\n    );\n  }\n  try {\n    const keystore = await fs.readFile(keystorePath, 'base64');\n    return {\n      keystore,\n      keyAlias,\n      keystorePassword,\n      keyPassword,\n    };\n  } catch (err) {\n    log.error(`Error while reading file ${keystorePath}`);\n    throw err;\n  }\n}\n\nasync function useKeystore(ctx: Context, experienceName: string, keystore: Keystore) {\n  await ctx.android.updateKeystore(experienceName, keystore);\n}\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  const desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport { UpdateKeystore, RemoveKeystore, DownloadKeystore, useKeystore, getKeystoreFromParams };\n"],"file":"AndroidKeystore.js"}