{"version":3,"sources":["../../../src/credentials/views/SetupIosBuildCredentials.ts"],"names":["SetupIosBuildCredentials","constructor","app","open","ctx","bestEffortAppleCtx","hasAppleCtx","appleApi","ensureAppExists","appleCtx","enablePushNotifications","SetupIosDist","error","log","distCert","ios","getDistCert","CommandError","SetupIosProvisioningProfile","nonInteractive","confirm","type","name","message","ensureAppleCtx","chalk","green"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;AAEO,MAAMA,wBAAN,CAAgD;AACrDC,EAAAA,WAAW,CAASC,GAAT,EAA+B;AAAA,SAAtBA,GAAsB,GAAtBA,GAAsB;AAAE;;AAE5C,QAAMC,IAAN,CAAWC,GAAX,EAAgD;AAC9C,UAAM,KAAKC,kBAAL,CAAwBD,GAAxB,CAAN;;AAEA,QAAIA,GAAG,CAACE,WAAJ,EAAJ,EAAuB;AACrB,YAAMC,QAAQ,GAACC,eAAT,CAAyBJ,GAAG,CAACK,QAA7B,EAAuC,KAAKP,GAA5C,EAAiD;AAAEQ,QAAAA,uBAAuB,EAAE;AAA3B,OAAjD,CAAN;AACD;;AACD,QAAI;AACF,YAAM,oCAAsBN,GAAtB,EAA2B,KAAIO,4BAAJ,EAAiB,KAAKT,GAAtB,CAA3B,CAAN;AACD,KAFD,CAEE,OAAOU,KAAP,EAAc;AACdC,qBAAID,KAAJ,CAAU,2CAAV;;AACA,YAAMA,KAAN;AACD;;AAED,UAAME,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQC,WAAR,CAAoB,KAAKd,GAAzB,CAAvB;;AACA,QAAI,CAACY,QAAL,EAAe;AACb,YAAM,KAAIG,uBAAJ,EACJ,0BADI,EAEH,+DAFG,CAAN;AAID;;AAED,QAAI;AACF,YAAM,oCAAsBb,GAAtB,EAA2B,KAAIc,0DAAJ,EAAgC,KAAKhB,GAArC,CAA3B,CAAN;AACD,KAFD,CAEE,OAAOU,KAAP,EAAc;AACdC,qBAAID,KAAJ,CAAU,uCAAV;;AACA,YAAMA,KAAN;AACD;;AAED,WAAO,IAAP;AACD,GAhCoD,CAkCrD;AACA;;;AACA,QAAMP,kBAAN,CAAyBD,GAAzB,EAAsD;AACpD,QAAIA,GAAG,CAACE,WAAJ,EAAJ,EAAuB;AACrB;AACA;AACD;;AAED,QAAIF,GAAG,CAACe,cAAR,EAAwB;AACtB;AACD;;AAED,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAM,wBAAO,CAC/B;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,OAAO,EAAG;AAHZ,KAD+B,CAAP,CAA1B;;AAOA,QAAIH,OAAJ,EAAa;AACX,aAAO,MAAMhB,GAAG,CAACoB,cAAJ,EAAb;AACD,KAFD,MAEO;AACL,0BACEC,iBAAMC,KAAN,CACE,sKADF,CADF;AAKD;AACF;;AA9DoD","sourcesContent":["import chalk from 'chalk';\n\nimport CommandError from '../../CommandError';\nimport * as appleApi from '../../appleApi';\nimport log from '../../log';\nimport prompt from '../../prompts';\nimport { AppLookupParams } from '../api/IosApi';\nimport { Context, IView } from '../context';\nimport { runCredentialsManager } from '../route';\nimport { SetupIosDist } from './SetupIosDist';\nimport { SetupIosProvisioningProfile } from './SetupIosProvisioningProfile';\n\nexport class SetupIosBuildCredentials implements IView {\n  constructor(private app: AppLookupParams) {}\n\n  async open(ctx: Context): Promise<IView | null> {\n    await this.bestEffortAppleCtx(ctx);\n\n    if (ctx.hasAppleCtx()) {\n      await appleApi.ensureAppExists(ctx.appleCtx, this.app, { enablePushNotifications: true });\n    }\n    try {\n      await runCredentialsManager(ctx, new SetupIosDist(this.app));\n    } catch (error) {\n      log.error('Failed to set up Distribution Certificate');\n      throw error;\n    }\n\n    const distCert = await ctx.ios.getDistCert(this.app);\n    if (!distCert) {\n      throw new CommandError(\n        'INSUFFICIENT_CREDENTIALS',\n        `This build request requires a valid distribution certificate.`\n      );\n    }\n\n    try {\n      await runCredentialsManager(ctx, new SetupIosProvisioningProfile(this.app));\n    } catch (error) {\n      log.error('Failed to set up Provisioning Profile');\n      throw error;\n    }\n\n    return null;\n  }\n\n  // Try to get the user to provide Apple credentials upfront\n  // We will be able to do full validation of their iOS creds this way\n  async bestEffortAppleCtx(ctx: Context): Promise<void> {\n    if (ctx.hasAppleCtx()) {\n      // skip prompts if already have apple ctx\n      return;\n    }\n\n    if (ctx.nonInteractive) {\n      return;\n    }\n\n    const { confirm } = await prompt([\n      {\n        type: 'confirm',\n        name: 'confirm',\n        message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`,\n      },\n    ]);\n    if (confirm) {\n      return await ctx.ensureAppleCtx();\n    } else {\n      log(\n        chalk.green(\n          'No problem! ðŸ‘Œ \\nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \\nBut we can still set it up if you upload your credentials.'\n        )\n      );\n    }\n  }\n}\n"],"file":"SetupIosBuildCredentials.js"}