"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SetupIosBuildCredentials = void 0;

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _CommandError() {
  const data = _interopRequireDefault(require("../../CommandError"));

  _CommandError = function () {
    return data;
  };

  return data;
}

function appleApi() {
  const data = _interopRequireWildcard(require("../../appleApi"));

  appleApi = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _prompts() {
  const data = _interopRequireDefault(require("../../prompts"));

  _prompts = function () {
    return data;
  };

  return data;
}

function _route() {
  const data = require("../route");

  _route = function () {
    return data;
  };

  return data;
}

function _SetupIosDist() {
  const data = require("./SetupIosDist");

  _SetupIosDist = function () {
    return data;
  };

  return data;
}

function _SetupIosProvisioningProfile() {
  const data = require("./SetupIosProvisioningProfile");

  _SetupIosProvisioningProfile = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SetupIosBuildCredentials {
  constructor(app) {
    this.app = app;
  }

  async open(ctx) {
    await this.bestEffortAppleCtx(ctx);

    if (ctx.hasAppleCtx()) {
      await appleApi().ensureAppExists(ctx.appleCtx, this.app, {
        enablePushNotifications: true
      });
    }

    try {
      await (0, _route().runCredentialsManager)(ctx, new (_SetupIosDist().SetupIosDist)(this.app));
    } catch (error) {
      _log().default.error('Failed to set up Distribution Certificate');

      throw error;
    }

    const distCert = await ctx.ios.getDistCert(this.app);

    if (!distCert) {
      throw new (_CommandError().default)('INSUFFICIENT_CREDENTIALS', `This build request requires a valid distribution certificate.`);
    }

    try {
      await (0, _route().runCredentialsManager)(ctx, new (_SetupIosProvisioningProfile().SetupIosProvisioningProfile)(this.app));
    } catch (error) {
      _log().default.error('Failed to set up Provisioning Profile');

      throw error;
    }

    return null;
  } // Try to get the user to provide Apple credentials upfront
  // We will be able to do full validation of their iOS creds this way


  async bestEffortAppleCtx(ctx) {
    if (ctx.hasAppleCtx()) {
      // skip prompts if already have apple ctx
      return;
    }

    if (ctx.nonInteractive) {
      return;
    }

    const {
      confirm
    } = await (0, _prompts().default)([{
      type: 'confirm',
      name: 'confirm',
      message: `Do you have access to the Apple account that will be used for submitting this app to the App Store?`
    }]);

    if (confirm) {
      return await ctx.ensureAppleCtx();
    } else {
      (0, _log().default)(_chalk().default.green('No problem! ðŸ‘Œ \nWe canâ€™t auto-generate credentials if you donâ€™t have access to the main Apple account. \nBut we can still set it up if you upload your credentials.'));
    }
  }

}

exports.SetupIosBuildCredentials = SetupIosBuildCredentials;
//# sourceMappingURL=SetupIosBuildCredentials.js.map