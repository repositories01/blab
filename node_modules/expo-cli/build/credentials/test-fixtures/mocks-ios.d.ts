/// <reference types="jest" />
import { User } from '@expo/xdl';
import { DistCert, DistCertInfo, ProvisioningProfile, ProvisioningProfileInfo, PushKey, PushKeyInfo, Team } from '../../appleApi';
import { IosDistCredentials, IosPushCredentials } from '../credentials';
export declare const testSlug = "testApp";
export declare const testExperienceName: string;
export declare const testBundleIdentifier = "test.com.app";
export declare const testAppLookupParams: {
    accountName: string;
    projectName: string;
    bundleIdentifier: string;
};
export declare const testAppleTeam: Team;
export declare const testProvisioningProfile: ProvisioningProfile;
export declare const testProvisioningProfiles: ProvisioningProfile[];
export declare const testProvisioningProfileFromApple: ProvisioningProfileInfo;
export declare const testProvisioningProfilesFromApple: ProvisioningProfileInfo[];
export declare const testDistCert: DistCert;
export declare const testIosDistCredential: IosDistCredentials;
export declare const testIosDistCredentials: IosDistCredentials[];
export declare const testDistCertFromApple: DistCertInfo;
export declare const testDistCertsFromApple: DistCertInfo[];
export declare const testPushKey: PushKey;
export declare const testIosPushCredential: IosPushCredentials;
export declare const testIosPushCredentials: IosPushCredentials[];
export declare const testPushKeyFromApple: PushKeyInfo;
export declare const testPushKeysFromApple: PushKeyInfo[];
export declare const testLegacyPushCert: {
    pushId: string;
    pushP12: string;
    pushPassword: string;
};
export declare const testAppCredential: {
    experienceName: string;
    bundleIdentifier: string;
    distCredentialsId: number;
    pushCredentialsId: number;
    credentials: {
        provisioningProfileId?: string | undefined;
        provisioningProfile: string;
        teamId: string;
        teamName?: string | undefined;
    };
};
export declare const testAllCredentialsForApp: {
    pushCredentials: PushKey;
    distCredentials: DistCert;
    experienceName: string;
    bundleIdentifier: string;
    distCredentialsId: number;
    pushCredentialsId: number;
    credentials: {
        provisioningProfileId?: string | undefined;
        provisioningProfile: string;
        teamId: string;
        teamName?: string | undefined;
    };
};
export declare const testAppCredentials: {
    experienceName: string;
    bundleIdentifier: string;
    distCredentialsId: number;
    pushCredentialsId: number;
    credentials: {
        provisioningProfileId?: string | undefined;
        provisioningProfile: string;
        teamId: string;
        teamName?: string | undefined;
    };
}[];
export declare const testAllCredentials: {
    userCredentials: (IosPushCredentials | IosDistCredentials)[];
    appCredentials: {
        experienceName: string;
        bundleIdentifier: string;
        distCredentialsId: number;
        pushCredentialsId: number;
        credentials: {
            provisioningProfileId?: string | undefined;
            provisioningProfile: string;
            teamId: string;
            teamName?: string | undefined;
        };
    }[];
};
export declare const jester: User;
export declare const jester2: User;
export declare function getApiV2MockCredentials(overridenMock?: {
    [key: string]: any;
}): {
    sessionSecret: string;
    getAsync: jest.Mock<any, any>;
    postAsync: jest.Mock<any, any>;
    putAsync: jest.Mock<any, any>;
    deleteAsync: jest.Mock<any, any>;
    uploadFormDataAsync: jest.Mock<any, any>;
    _requestAsync: jest.Mock<any, any>;
} & {
    [key: string]: any;
};
export declare function getApiV2Mock(overridenMock?: {
    [key: string]: any;
}): {
    sessionSecret: string;
    getAsync: jest.Mock<any, any>;
    postAsync: jest.Mock<any, any>;
    putAsync: jest.Mock<any, any>;
    deleteAsync: jest.Mock<any, any>;
    uploadFormDataAsync: jest.Mock<any, any>;
    _requestAsync: jest.Mock<any, any>;
} & {
    [key: string]: any;
};
export declare function getApiClientMock(overridenMock?: {
    [key: string]: any;
}): {
    getAllCredentialsApi: jest.Mock<never, []>;
    getAllCredentialsForAppApi: jest.Mock<never, []>;
    getUserCredentialsByIdApi: jest.Mock<never, []>;
    createDistCertApi: jest.Mock<never, []>;
    updateDistCertApi: jest.Mock<never, []>;
    deleteDistCertApi: jest.Mock<never, []>;
    useDistCertApi: jest.Mock<never, []>;
    createPushKeyApi: jest.Mock<never, []>;
    updatePushKeyApi: jest.Mock<never, []>;
    deletePushKeyApi: jest.Mock<never, []>;
    usePushKeyApi: jest.Mock<never, []>;
    deletePushCertApi: jest.Mock<never, []>;
    updateProvisioningProfileApi: jest.Mock<never, []>;
    deleteProvisioningProfileApi: jest.Mock<never, []>;
} & {
    [key: string]: any;
};
export declare const testAppJson: {
    name: string;
    version: string;
    slug: string;
    sdkVersion: string;
    ios: {
        bundleIdentifier: string;
    };
};
export declare const testAppJsonWithDifferentOwner: {
    owner: string;
    name: string;
    version: string;
    slug: string;
    sdkVersion: string;
    ios: {
        bundleIdentifier: string;
    };
};
export declare function getCtxMock(overridenMock?: {
    [key: string]: any;
}): {
    ios: {
        getDistCert: jest.Mock<DistCert, []>;
        createDistCert: jest.Mock<IosDistCredentials, []>;
        useDistCert: jest.Mock<any, any>;
        getPushKey: jest.Mock<PushKey, []>;
        createPushKey: jest.Mock<IosPushCredentials, []>;
        usePushKey: jest.Mock<any, any>;
        updateProvisioningProfile: jest.Mock<any, any>;
        getAppCredentials: jest.Mock<{
            experienceName: string;
            bundleIdentifier: string;
            distCredentialsId: number;
            pushCredentialsId: number;
            credentials: {
                provisioningProfileId?: string | undefined;
                provisioningProfile: string;
                teamId: string;
                teamName?: string | undefined;
            };
        }[], []>;
        getProvisioningProfile: jest.Mock<ProvisioningProfile, []>;
        getAllCredentials: jest.Mock<{
            userCredentials: (IosPushCredentials | IosDistCredentials)[];
            appCredentials: {
                experienceName: string;
                bundleIdentifier: string;
                distCredentialsId: number;
                pushCredentialsId: number;
                credentials: {
                    provisioningProfileId?: string | undefined;
                    provisioningProfile: string;
                    teamId: string;
                    teamName?: string | undefined;
                };
            }[];
        }, []>;
    };
    appleCtx: {
        appleId: string;
        appleIdPassword: string;
        team: {
            id: string;
        };
        fastlaneSession: string;
    };
    ensureAppleCtx: jest.Mock<any, any>;
    user: jest.Mock<any, any>;
    hasAppleCtx: jest.Mock<boolean, []>;
    hasProjectContext: boolean;
    manifest: {
        name: string;
        version: string;
        slug: string;
        sdkVersion: string;
        ios: {
            bundleIdentifier: string;
        };
    };
} & {
    [key: string]: any;
};
