"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _easJson() {
  const data = require("../../easJson");

  _easJson = function () {
    return data;
  };

  return data;
}

function _context() {
  const data = require("../context");

  _context = function () {
    return data;
  };

  return data;
}

function _local() {
  const data = require("../local");

  _local = function () {
    return data;
  };

  return data;
}

function _route() {
  const data = require("../route");

  _route = function () {
    return data;
  };

  return data;
}

function _SetupIosBuildCredentials() {
  const data = require("../views/SetupIosBuildCredentials");

  _SetupIosBuildCredentials = function () {
    return data;
  };

  return data;
}

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class iOSCredentialsProvider {
  constructor(projectDir, app) {
    this.projectDir = projectDir;
    this.app = app;

    _defineProperty(this, "platform", 'ios');

    _defineProperty(this, "ctx", new (_context().Context)());

    _defineProperty(this, "credentials", void 0);
  }

  async initAsync() {
    await this.ctx.init(this.projectDir, {
      nonInteractive: this.ctx.nonInteractive
    });
  }

  async hasRemoteAsync() {
    const distCert = await this.ctx.ios.getDistCert(this.app);
    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);
    return !!(distCert && provisioningProfile);
  }

  async hasLocalAsync() {
    if (!(await _local().credentialsJson.fileExistsAsync(this.projectDir))) {
      return false;
    }

    try {
      await _local().credentialsJson.readIosAsync(this.projectDir);
      return true;
    } catch (_) {
      return false;
    }
  }

  async isLocalSyncedAsync() {
    try {
      const [remote, local] = await Promise.all([this.getRemoteAsync(), this.getLocalAsync()]);
      const r = remote;
      const l = local;
      return !!(r.provisioningProfile === l.provisioningProfile && r.distributionCertificate.certP12 === l.distributionCertificate.certP12 && r.distributionCertificate.certPassword === l.distributionCertificate.certPassword);
    } catch (_) {
      return false;
    }
  }

  async getCredentialsAsync(src) {
    switch (src) {
      case _easJson().CredentialsSource.LOCAL:
        return await this.getLocalAsync();

      case _easJson().CredentialsSource.REMOTE:
        return await this.getRemoteAsync();
    }
  }

  async getLocalAsync() {
    return await _local().credentialsJson.readIosAsync(this.projectDir);
  }

  async getRemoteAsync() {
    await (0, _route().runCredentialsManager)(this.ctx, new (_SetupIosBuildCredentials().SetupIosBuildCredentials)(this.app));
    const distCert = await this.ctx.ios.getDistCert(this.app);

    if (!distCert) {
      throw new Error('Missing distribution certificate'); // shouldn't happen
    }

    const provisioningProfile = await this.ctx.ios.getProvisioningProfile(this.app);

    if (!provisioningProfile) {
      throw new Error('Missing provisioning profile'); // shouldn't happen
    }

    return {
      provisioningProfile: provisioningProfile.provisioningProfile,
      distributionCertificate: {
        certP12: distCert.certP12,
        certPassword: distCert.certPassword
      }
    };
  }

}

exports.default = iOSCredentialsProvider;
//# sourceMappingURL=iOSCredentialsProvider.js.map